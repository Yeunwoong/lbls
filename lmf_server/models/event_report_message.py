# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.event_class import EventClass
from lmf_server.models.ref_to_binary_data import RefToBinaryData
from lmf_server import util

from lmf_server.models.event_class import EventClass  # noqa: E501
from lmf_server.models.ref_to_binary_data import RefToBinaryData  # noqa: E501

class EventReportMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_class=None, event_content=None):  # noqa: E501
        """EventReportMessage - a model defined in OpenAPI

        :param event_class: The event_class of this EventReportMessage.  # noqa: E501
        :type event_class: EventClass
        :param event_content: The event_content of this EventReportMessage.  # noqa: E501
        :type event_content: RefToBinaryData
        """
        self.openapi_types = {
            'event_class': EventClass,
            'event_content': RefToBinaryData
        }

        self.attribute_map = {
            'event_class': 'eventClass',
            'event_content': 'eventContent'
        }

        self._event_class = event_class
        self._event_content = event_content

    @classmethod
    def from_dict(cls, dikt) -> 'EventReportMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventReportMessage of this EventReportMessage.  # noqa: E501
        :rtype: EventReportMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_class(self):
        """Gets the event_class of this EventReportMessage.


        :return: The event_class of this EventReportMessage.
        :rtype: EventClass
        """
        return self._event_class

    @event_class.setter
    def event_class(self, event_class):
        """Sets the event_class of this EventReportMessage.


        :param event_class: The event_class of this EventReportMessage.
        :type event_class: EventClass
        """
        if event_class is None:
            raise ValueError("Invalid value for `event_class`, must not be `None`")  # noqa: E501

        self._event_class = event_class

    @property
    def event_content(self):
        """Gets the event_content of this EventReportMessage.


        :return: The event_content of this EventReportMessage.
        :rtype: RefToBinaryData
        """
        return self._event_content

    @event_content.setter
    def event_content(self, event_content):
        """Sets the event_content of this EventReportMessage.


        :param event_content: The event_content of this EventReportMessage.
        :type event_content: RefToBinaryData
        """
        if event_content is None:
            raise ValueError("Invalid value for `event_content`, must not be `None`")  # noqa: E501

        self._event_content = event_content
