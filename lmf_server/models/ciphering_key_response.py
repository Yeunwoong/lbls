# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.ciphering_set_report import CipheringSetReport
from lmf_server import util

from lmf_server.models.ciphering_set_report import CipheringSetReport  # noqa: E501

class CipheringKeyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphering_data_report=None):  # noqa: E501
        """CipheringKeyResponse - a model defined in OpenAPI

        :param ciphering_data_report: The ciphering_data_report of this CipheringKeyResponse.  # noqa: E501
        :type ciphering_data_report: List[CipheringSetReport]
        """
        self.openapi_types = {
            'ciphering_data_report': List[CipheringSetReport]
        }

        self.attribute_map = {
            'ciphering_data_report': 'cipheringDataReport'
        }

        self._ciphering_data_report = ciphering_data_report

    @classmethod
    def from_dict(cls, dikt) -> 'CipheringKeyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CipheringKeyResponse of this CipheringKeyResponse.  # noqa: E501
        :rtype: CipheringKeyResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphering_data_report(self):
        """Gets the ciphering_data_report of this CipheringKeyResponse.


        :return: The ciphering_data_report of this CipheringKeyResponse.
        :rtype: List[CipheringSetReport]
        """
        return self._ciphering_data_report

    @ciphering_data_report.setter
    def ciphering_data_report(self, ciphering_data_report):
        """Sets the ciphering_data_report of this CipheringKeyResponse.


        :param ciphering_data_report: The ciphering_data_report of this CipheringKeyResponse.
        :type ciphering_data_report: List[CipheringSetReport]
        """
        if ciphering_data_report is not None and len(ciphering_data_report) < 1:
            raise ValueError("Invalid value for `ciphering_data_report`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ciphering_data_report = ciphering_data_report
