# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.area_event_info import AreaEventInfo
from lmf_server.models.ecgi import Ecgi
from lmf_server.models.event_report_message import EventReportMessage
from lmf_server.models.event_reporting_status import EventReportingStatus
from lmf_server.models.guami import Guami
from lmf_server.models.ldr_type import LdrType
from lmf_server.models.location_qo_s import LocationQoS
from lmf_server.models.motion_event_info import MotionEventInfo
from lmf_server.models.ncgi import Ncgi
from lmf_server.models.periodic_event_info import PeriodicEventInfo
from lmf_server.models.supported_gad_shapes import SupportedGADShapes
from lmf_server.models.ue_location_info import UELocationInfo
import re
from lmf_server import util

from lmf_server.models.area_event_info import AreaEventInfo  # noqa: E501
from lmf_server.models.ecgi import Ecgi  # noqa: E501
from lmf_server.models.event_report_message import EventReportMessage  # noqa: E501
from lmf_server.models.event_reporting_status import EventReportingStatus  # noqa: E501
from lmf_server.models.guami import Guami  # noqa: E501
from lmf_server.models.ldr_type import LdrType  # noqa: E501
from lmf_server.models.location_qo_s import LocationQoS  # noqa: E501
from lmf_server.models.motion_event_info import MotionEventInfo  # noqa: E501
from lmf_server.models.ncgi import Ncgi  # noqa: E501
from lmf_server.models.periodic_event_info import PeriodicEventInfo  # noqa: E501
from lmf_server.models.supported_gad_shapes import SupportedGADShapes  # noqa: E501
from lmf_server.models.ue_location_info import UELocationInfo  # noqa: E501
import re  # noqa: E501

class LocContextData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amf_id=None, location_qo_s=None, supported_gad_shapes=None, supi=None, gpsi=None, ldr_type=None, hgmlc_call_back_uri=None, ldr_reference=None, periodic_event_info=None, area_event_info=None, motion_event_info=None, event_report_message=None, event_reporting_status=None, ue_location_info=None, c_io_t5_gs_optimisation=False, ecgi=None, ncgi=None, guami=None, supported_features=None, ue_positioning_cap=None, scheduled_loc_time=None):  # noqa: E501
        """LocContextData - a model defined in OpenAPI

        :param amf_id: The amf_id of this LocContextData.  # noqa: E501
        :type amf_id: str
        :param location_qo_s: The location_qo_s of this LocContextData.  # noqa: E501
        :type location_qo_s: LocationQoS
        :param supported_gad_shapes: The supported_gad_shapes of this LocContextData.  # noqa: E501
        :type supported_gad_shapes: List[SupportedGADShapes]
        :param supi: The supi of this LocContextData.  # noqa: E501
        :type supi: str
        :param gpsi: The gpsi of this LocContextData.  # noqa: E501
        :type gpsi: str
        :param ldr_type: The ldr_type of this LocContextData.  # noqa: E501
        :type ldr_type: LdrType
        :param hgmlc_call_back_uri: The hgmlc_call_back_uri of this LocContextData.  # noqa: E501
        :type hgmlc_call_back_uri: str
        :param ldr_reference: The ldr_reference of this LocContextData.  # noqa: E501
        :type ldr_reference: str
        :param periodic_event_info: The periodic_event_info of this LocContextData.  # noqa: E501
        :type periodic_event_info: PeriodicEventInfo
        :param area_event_info: The area_event_info of this LocContextData.  # noqa: E501
        :type area_event_info: AreaEventInfo
        :param motion_event_info: The motion_event_info of this LocContextData.  # noqa: E501
        :type motion_event_info: MotionEventInfo
        :param event_report_message: The event_report_message of this LocContextData.  # noqa: E501
        :type event_report_message: EventReportMessage
        :param event_reporting_status: The event_reporting_status of this LocContextData.  # noqa: E501
        :type event_reporting_status: EventReportingStatus
        :param ue_location_info: The ue_location_info of this LocContextData.  # noqa: E501
        :type ue_location_info: UELocationInfo
        :param c_io_t5_gs_optimisation: The c_io_t5_gs_optimisation of this LocContextData.  # noqa: E501
        :type c_io_t5_gs_optimisation: bool
        :param ecgi: The ecgi of this LocContextData.  # noqa: E501
        :type ecgi: Ecgi
        :param ncgi: The ncgi of this LocContextData.  # noqa: E501
        :type ncgi: Ncgi
        :param guami: The guami of this LocContextData.  # noqa: E501
        :type guami: Guami
        :param supported_features: The supported_features of this LocContextData.  # noqa: E501
        :type supported_features: str
        :param ue_positioning_cap: The ue_positioning_cap of this LocContextData.  # noqa: E501
        :type ue_positioning_cap: str
        :param scheduled_loc_time: The scheduled_loc_time of this LocContextData.  # noqa: E501
        :type scheduled_loc_time: datetime
        """
        self.openapi_types = {
            'amf_id': str,
            'location_qo_s': LocationQoS,
            'supported_gad_shapes': List[SupportedGADShapes],
            'supi': str,
            'gpsi': str,
            'ldr_type': LdrType,
            'hgmlc_call_back_uri': str,
            'ldr_reference': str,
            'periodic_event_info': PeriodicEventInfo,
            'area_event_info': AreaEventInfo,
            'motion_event_info': MotionEventInfo,
            'event_report_message': EventReportMessage,
            'event_reporting_status': EventReportingStatus,
            'ue_location_info': UELocationInfo,
            'c_io_t5_gs_optimisation': bool,
            'ecgi': Ecgi,
            'ncgi': Ncgi,
            'guami': Guami,
            'supported_features': str,
            'ue_positioning_cap': str,
            'scheduled_loc_time': datetime
        }

        self.attribute_map = {
            'amf_id': 'amfId',
            'location_qo_s': 'locationQoS',
            'supported_gad_shapes': 'supportedGADShapes',
            'supi': 'supi',
            'gpsi': 'gpsi',
            'ldr_type': 'ldrType',
            'hgmlc_call_back_uri': 'hgmlcCallBackURI',
            'ldr_reference': 'ldrReference',
            'periodic_event_info': 'periodicEventInfo',
            'area_event_info': 'areaEventInfo',
            'motion_event_info': 'motionEventInfo',
            'event_report_message': 'eventReportMessage',
            'event_reporting_status': 'eventReportingStatus',
            'ue_location_info': 'ueLocationInfo',
            'c_io_t5_gs_optimisation': 'cIoT5GSOptimisation',
            'ecgi': 'ecgi',
            'ncgi': 'ncgi',
            'guami': 'guami',
            'supported_features': 'supportedFeatures',
            'ue_positioning_cap': 'uePositioningCap',
            'scheduled_loc_time': 'scheduledLocTime'
        }

        self._amf_id = amf_id
        self._location_qo_s = location_qo_s
        self._supported_gad_shapes = supported_gad_shapes
        self._supi = supi
        self._gpsi = gpsi
        self._ldr_type = ldr_type
        self._hgmlc_call_back_uri = hgmlc_call_back_uri
        self._ldr_reference = ldr_reference
        self._periodic_event_info = periodic_event_info
        self._area_event_info = area_event_info
        self._motion_event_info = motion_event_info
        self._event_report_message = event_report_message
        self._event_reporting_status = event_reporting_status
        self._ue_location_info = ue_location_info
        self._c_io_t5_gs_optimisation = c_io_t5_gs_optimisation
        self._ecgi = ecgi
        self._ncgi = ncgi
        self._guami = guami
        self._supported_features = supported_features
        self._ue_positioning_cap = ue_positioning_cap
        self._scheduled_loc_time = scheduled_loc_time

    @classmethod
    def from_dict(cls, dikt) -> 'LocContextData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocContextData of this LocContextData.  # noqa: E501
        :rtype: LocContextData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amf_id(self):
        """Gets the amf_id of this LocContextData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The amf_id of this LocContextData.
        :rtype: str
        """
        return self._amf_id

    @amf_id.setter
    def amf_id(self, amf_id):
        """Sets the amf_id of this LocContextData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param amf_id: The amf_id of this LocContextData.
        :type amf_id: str
        """
        if amf_id is None:
            raise ValueError("Invalid value for `amf_id`, must not be `None`")  # noqa: E501

        self._amf_id = amf_id

    @property
    def location_qo_s(self):
        """Gets the location_qo_s of this LocContextData.


        :return: The location_qo_s of this LocContextData.
        :rtype: LocationQoS
        """
        return self._location_qo_s

    @location_qo_s.setter
    def location_qo_s(self, location_qo_s):
        """Sets the location_qo_s of this LocContextData.


        :param location_qo_s: The location_qo_s of this LocContextData.
        :type location_qo_s: LocationQoS
        """

        self._location_qo_s = location_qo_s

    @property
    def supported_gad_shapes(self):
        """Gets the supported_gad_shapes of this LocContextData.


        :return: The supported_gad_shapes of this LocContextData.
        :rtype: List[SupportedGADShapes]
        """
        return self._supported_gad_shapes

    @supported_gad_shapes.setter
    def supported_gad_shapes(self, supported_gad_shapes):
        """Sets the supported_gad_shapes of this LocContextData.


        :param supported_gad_shapes: The supported_gad_shapes of this LocContextData.
        :type supported_gad_shapes: List[SupportedGADShapes]
        """
        if supported_gad_shapes is not None and len(supported_gad_shapes) < 1:
            raise ValueError("Invalid value for `supported_gad_shapes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supported_gad_shapes = supported_gad_shapes

    @property
    def supi(self):
        """Gets the supi of this LocContextData.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this LocContextData.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this LocContextData.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this LocContextData.
        :type supi: str
        """
        #if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
        #    raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def gpsi(self):
        """Gets the gpsi of this LocContextData.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this LocContextData.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this LocContextData.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this LocContextData.
        :type gpsi: str
        """
        #if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
        #    raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def ldr_type(self):
        """Gets the ldr_type of this LocContextData.


        :return: The ldr_type of this LocContextData.
        :rtype: LdrType
        """
        return self._ldr_type

    @ldr_type.setter
    def ldr_type(self, ldr_type):
        """Sets the ldr_type of this LocContextData.


        :param ldr_type: The ldr_type of this LocContextData.
        :type ldr_type: LdrType
        """
        if ldr_type is None:
            raise ValueError("Invalid value for `ldr_type`, must not be `None`")  # noqa: E501

        self._ldr_type = ldr_type

    @property
    def hgmlc_call_back_uri(self):
        """Gets the hgmlc_call_back_uri of this LocContextData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The hgmlc_call_back_uri of this LocContextData.
        :rtype: str
        """
        return self._hgmlc_call_back_uri

    @hgmlc_call_back_uri.setter
    def hgmlc_call_back_uri(self, hgmlc_call_back_uri):
        """Sets the hgmlc_call_back_uri of this LocContextData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param hgmlc_call_back_uri: The hgmlc_call_back_uri of this LocContextData.
        :type hgmlc_call_back_uri: str
        """
        if hgmlc_call_back_uri is None:
            raise ValueError("Invalid value for `hgmlc_call_back_uri`, must not be `None`")  # noqa: E501

        self._hgmlc_call_back_uri = hgmlc_call_back_uri

    @property
    def ldr_reference(self):
        """Gets the ldr_reference of this LocContextData.

        LDR Reference.  # noqa: E501

        :return: The ldr_reference of this LocContextData.
        :rtype: str
        """
        return self._ldr_reference

    @ldr_reference.setter
    def ldr_reference(self, ldr_reference):
        """Sets the ldr_reference of this LocContextData.

        LDR Reference.  # noqa: E501

        :param ldr_reference: The ldr_reference of this LocContextData.
        :type ldr_reference: str
        """
        if ldr_reference is None:
            raise ValueError("Invalid value for `ldr_reference`, must not be `None`")  # noqa: E501
        if ldr_reference is not None and len(ldr_reference) > 510:
            raise ValueError("Invalid value for `ldr_reference`, length must be less than or equal to `510`")  # noqa: E501
        if ldr_reference is not None and len(ldr_reference) < 2:
            raise ValueError("Invalid value for `ldr_reference`, length must be greater than or equal to `2`")  # noqa: E501

        self._ldr_reference = ldr_reference

    @property
    def periodic_event_info(self):
        """Gets the periodic_event_info of this LocContextData.


        :return: The periodic_event_info of this LocContextData.
        :rtype: PeriodicEventInfo
        """
        return self._periodic_event_info

    @periodic_event_info.setter
    def periodic_event_info(self, periodic_event_info):
        """Sets the periodic_event_info of this LocContextData.


        :param periodic_event_info: The periodic_event_info of this LocContextData.
        :type periodic_event_info: PeriodicEventInfo
        """

        self._periodic_event_info = periodic_event_info

    @property
    def area_event_info(self):
        """Gets the area_event_info of this LocContextData.


        :return: The area_event_info of this LocContextData.
        :rtype: AreaEventInfo
        """
        return self._area_event_info

    @area_event_info.setter
    def area_event_info(self, area_event_info):
        """Sets the area_event_info of this LocContextData.


        :param area_event_info: The area_event_info of this LocContextData.
        :type area_event_info: AreaEventInfo
        """

        self._area_event_info = area_event_info

    @property
    def motion_event_info(self):
        """Gets the motion_event_info of this LocContextData.


        :return: The motion_event_info of this LocContextData.
        :rtype: MotionEventInfo
        """
        return self._motion_event_info

    @motion_event_info.setter
    def motion_event_info(self, motion_event_info):
        """Sets the motion_event_info of this LocContextData.


        :param motion_event_info: The motion_event_info of this LocContextData.
        :type motion_event_info: MotionEventInfo
        """

        self._motion_event_info = motion_event_info

    @property
    def event_report_message(self):
        """Gets the event_report_message of this LocContextData.


        :return: The event_report_message of this LocContextData.
        :rtype: EventReportMessage
        """
        return self._event_report_message

    @event_report_message.setter
    def event_report_message(self, event_report_message):
        """Sets the event_report_message of this LocContextData.


        :param event_report_message: The event_report_message of this LocContextData.
        :type event_report_message: EventReportMessage
        """
        if event_report_message is None:
            raise ValueError("Invalid value for `event_report_message`, must not be `None`")  # noqa: E501

        self._event_report_message = event_report_message

    @property
    def event_reporting_status(self):
        """Gets the event_reporting_status of this LocContextData.


        :return: The event_reporting_status of this LocContextData.
        :rtype: EventReportingStatus
        """
        return self._event_reporting_status

    @event_reporting_status.setter
    def event_reporting_status(self, event_reporting_status):
        """Sets the event_reporting_status of this LocContextData.


        :param event_reporting_status: The event_reporting_status of this LocContextData.
        :type event_reporting_status: EventReportingStatus
        """

        self._event_reporting_status = event_reporting_status

    @property
    def ue_location_info(self):
        """Gets the ue_location_info of this LocContextData.


        :return: The ue_location_info of this LocContextData.
        :rtype: UELocationInfo
        """
        return self._ue_location_info

    @ue_location_info.setter
    def ue_location_info(self, ue_location_info):
        """Sets the ue_location_info of this LocContextData.


        :param ue_location_info: The ue_location_info of this LocContextData.
        :type ue_location_info: UELocationInfo
        """

        self._ue_location_info = ue_location_info

    @property
    def c_io_t5_gs_optimisation(self):
        """Gets the c_io_t5_gs_optimisation of this LocContextData.


        :return: The c_io_t5_gs_optimisation of this LocContextData.
        :rtype: bool
        """
        return self._c_io_t5_gs_optimisation

    @c_io_t5_gs_optimisation.setter
    def c_io_t5_gs_optimisation(self, c_io_t5_gs_optimisation):
        """Sets the c_io_t5_gs_optimisation of this LocContextData.


        :param c_io_t5_gs_optimisation: The c_io_t5_gs_optimisation of this LocContextData.
        :type c_io_t5_gs_optimisation: bool
        """

        self._c_io_t5_gs_optimisation = c_io_t5_gs_optimisation

    @property
    def ecgi(self):
        """Gets the ecgi of this LocContextData.


        :return: The ecgi of this LocContextData.
        :rtype: Ecgi
        """
        return self._ecgi

    @ecgi.setter
    def ecgi(self, ecgi):
        """Sets the ecgi of this LocContextData.


        :param ecgi: The ecgi of this LocContextData.
        :type ecgi: Ecgi
        """

        self._ecgi = ecgi

    @property
    def ncgi(self):
        """Gets the ncgi of this LocContextData.


        :return: The ncgi of this LocContextData.
        :rtype: Ncgi
        """
        return self._ncgi

    @ncgi.setter
    def ncgi(self, ncgi):
        """Sets the ncgi of this LocContextData.


        :param ncgi: The ncgi of this LocContextData.
        :type ncgi: Ncgi
        """

        self._ncgi = ncgi

    @property
    def guami(self):
        """Gets the guami of this LocContextData.


        :return: The guami of this LocContextData.
        :rtype: Guami
        """
        return self._guami

    @guami.setter
    def guami(self, guami):
        """Sets the guami of this LocContextData.


        :param guami: The guami of this LocContextData.
        :type guami: Guami
        """

        self._guami = guami

    @property
    def supported_features(self):
        """Gets the supported_features of this LocContextData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this LocContextData.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this LocContextData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this LocContextData.
        :type supported_features: str
        """
        #if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
        #    raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def ue_positioning_cap(self):
        """Gets the ue_positioning_cap of this LocContextData.

        Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).  # noqa: E501

        :return: The ue_positioning_cap of this LocContextData.
        :rtype: str
        """
        return self._ue_positioning_cap

    @ue_positioning_cap.setter
    def ue_positioning_cap(self, ue_positioning_cap):
        """Sets the ue_positioning_cap of this LocContextData.

        Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).  # noqa: E501

        :param ue_positioning_cap: The ue_positioning_cap of this LocContextData.
        :type ue_positioning_cap: str
        """

        self._ue_positioning_cap = ue_positioning_cap

    @property
    def scheduled_loc_time(self):
        """Gets the scheduled_loc_time of this LocContextData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The scheduled_loc_time of this LocContextData.
        :rtype: datetime
        """
        return self._scheduled_loc_time

    @scheduled_loc_time.setter
    def scheduled_loc_time(self, scheduled_loc_time):
        """Sets the scheduled_loc_time of this LocContextData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param scheduled_loc_time: The scheduled_loc_time of this LocContextData.
        :type scheduled_loc_time: datetime
        """

        self._scheduled_loc_time = scheduled_loc_time
