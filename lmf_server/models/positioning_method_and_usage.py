# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.positioning_method import PositioningMethod
from lmf_server.models.positioning_mode import PositioningMode
from lmf_server.models.usage import Usage
from lmf_server import util

from lmf_server.models.positioning_method import PositioningMethod  # noqa: E501
from lmf_server.models.positioning_mode import PositioningMode  # noqa: E501
from lmf_server.models.usage import Usage  # noqa: E501

class PositioningMethodAndUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method=None, mode=None, usage=None, method_code=None):  # noqa: E501
        """PositioningMethodAndUsage - a model defined in OpenAPI

        :param method: The method of this PositioningMethodAndUsage.  # noqa: E501
        :type method: PositioningMethod
        :param mode: The mode of this PositioningMethodAndUsage.  # noqa: E501
        :type mode: PositioningMode
        :param usage: The usage of this PositioningMethodAndUsage.  # noqa: E501
        :type usage: Usage
        :param method_code: The method_code of this PositioningMethodAndUsage.  # noqa: E501
        :type method_code: int
        """
        self.openapi_types = {
            'method': PositioningMethod,
            'mode': PositioningMode,
            'usage': Usage,
            'method_code': int
        }

        self.attribute_map = {
            'method': 'method',
            'mode': 'mode',
            'usage': 'usage',
            'method_code': 'methodCode'
        }

        self._method = method
        self._mode = mode
        self._usage = usage
        self._method_code = method_code

    @classmethod
    def from_dict(cls, dikt) -> 'PositioningMethodAndUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PositioningMethodAndUsage of this PositioningMethodAndUsage.  # noqa: E501
        :rtype: PositioningMethodAndUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this PositioningMethodAndUsage.


        :return: The method of this PositioningMethodAndUsage.
        :rtype: PositioningMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PositioningMethodAndUsage.


        :param method: The method of this PositioningMethodAndUsage.
        :type method: PositioningMethod
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def mode(self):
        """Gets the mode of this PositioningMethodAndUsage.


        :return: The mode of this PositioningMethodAndUsage.
        :rtype: PositioningMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PositioningMethodAndUsage.


        :param mode: The mode of this PositioningMethodAndUsage.
        :type mode: PositioningMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def usage(self):
        """Gets the usage of this PositioningMethodAndUsage.


        :return: The usage of this PositioningMethodAndUsage.
        :rtype: Usage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this PositioningMethodAndUsage.


        :param usage: The usage of this PositioningMethodAndUsage.
        :type usage: Usage
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    @property
    def method_code(self):
        """Gets the method_code of this PositioningMethodAndUsage.


        :return: The method_code of this PositioningMethodAndUsage.
        :rtype: int
        """
        return self._method_code

    @method_code.setter
    def method_code(self, method_code):
        """Sets the method_code of this PositioningMethodAndUsage.


        :param method_code: The method_code of this PositioningMethodAndUsage.
        :type method_code: int
        """
        if method_code is not None and method_code > 31:  # noqa: E501
            raise ValueError("Invalid value for `method_code`, must be a value less than or equal to `31`")  # noqa: E501
        if method_code is not None and method_code < 16:  # noqa: E501
            raise ValueError("Invalid value for `method_code`, must be a value greater than or equal to `16`")  # noqa: E501

        self._method_code = method_code
