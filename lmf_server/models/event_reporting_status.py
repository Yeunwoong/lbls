# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server import util


class EventReportingStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_report_counter=None, event_report_duration=None):  # noqa: E501
        """EventReportingStatus - a model defined in OpenAPI

        :param event_report_counter: The event_report_counter of this EventReportingStatus.  # noqa: E501
        :type event_report_counter: int
        :param event_report_duration: The event_report_duration of this EventReportingStatus.  # noqa: E501
        :type event_report_duration: int
        """
        self.openapi_types = {
            'event_report_counter': int,
            'event_report_duration': int
        }

        self.attribute_map = {
            'event_report_counter': 'eventReportCounter',
            'event_report_duration': 'eventReportDuration'
        }

        self._event_report_counter = event_report_counter
        self._event_report_duration = event_report_duration

    @classmethod
    def from_dict(cls, dikt) -> 'EventReportingStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventReportingStatus of this EventReportingStatus.  # noqa: E501
        :rtype: EventReportingStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_report_counter(self):
        """Gets the event_report_counter of this EventReportingStatus.

        Number of event reports received from the target UE.  # noqa: E501

        :return: The event_report_counter of this EventReportingStatus.
        :rtype: int
        """
        return self._event_report_counter

    @event_report_counter.setter
    def event_report_counter(self, event_report_counter):
        """Sets the event_report_counter of this EventReportingStatus.

        Number of event reports received from the target UE.  # noqa: E501

        :param event_report_counter: The event_report_counter of this EventReportingStatus.
        :type event_report_counter: int
        """
        if event_report_counter is not None and event_report_counter > 8640000:  # noqa: E501
            raise ValueError("Invalid value for `event_report_counter`, must be a value less than or equal to `8640000`")  # noqa: E501
        if event_report_counter is not None and event_report_counter < 1:  # noqa: E501
            raise ValueError("Invalid value for `event_report_counter`, must be a value greater than or equal to `1`")  # noqa: E501

        self._event_report_counter = event_report_counter

    @property
    def event_report_duration(self):
        """Gets the event_report_duration of this EventReportingStatus.

        Duration of event reporting.  # noqa: E501

        :return: The event_report_duration of this EventReportingStatus.
        :rtype: int
        """
        return self._event_report_duration

    @event_report_duration.setter
    def event_report_duration(self, event_report_duration):
        """Sets the event_report_duration of this EventReportingStatus.

        Duration of event reporting.  # noqa: E501

        :param event_report_duration: The event_report_duration of this EventReportingStatus.
        :type event_report_duration: int
        """
        if event_report_duration is not None and event_report_duration > 8640000:  # noqa: E501
            raise ValueError("Invalid value for `event_report_duration`, must be a value less than or equal to `8640000`")  # noqa: E501
        if event_report_duration is not None and event_report_duration < 1:  # noqa: E501
            raise ValueError("Invalid value for `event_report_duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._event_report_duration = event_report_duration
