# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server import util


class UeAreaIndication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country=None, international_area_ind=False):  # noqa: E501
        """UeAreaIndication - a model defined in OpenAPI

        :param country: The country of this UeAreaIndication.  # noqa: E501
        :type country: str
        :param international_area_ind: The international_area_ind of this UeAreaIndication.  # noqa: E501
        :type international_area_ind: bool
        """
        self.openapi_types = {
            'country': str,
            'international_area_ind': bool
        }

        self.attribute_map = {
            'country': 'country',
            'international_area_ind': 'internationalAreaInd'
        }

        self._country = country
        self._international_area_ind = international_area_ind

    @classmethod
    def from_dict(cls, dikt) -> 'UeAreaIndication':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UeAreaIndication of this UeAreaIndication.  # noqa: E501
        :rtype: UeAreaIndication
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this UeAreaIndication.

        Indicates country or area in a country where UE is located  # noqa: E501

        :return: The country of this UeAreaIndication.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UeAreaIndication.

        Indicates country or area in a country where UE is located  # noqa: E501

        :param country: The country of this UeAreaIndication.
        :type country: str
        """

        self._country = country

    @property
    def international_area_ind(self):
        """Gets the international_area_ind of this UeAreaIndication.

        Indicates international area indication if UE is located in international area  # noqa: E501

        :return: The international_area_ind of this UeAreaIndication.
        :rtype: bool
        """
        return self._international_area_ind

    @international_area_ind.setter
    def international_area_ind(self, international_area_ind):
        """Sets the international_area_ind of this UeAreaIndication.

        Indicates international area indication if UE is located in international area  # noqa: E501

        :param international_area_ind: The international_area_ind of this UeAreaIndication.
        :type international_area_ind: bool
        """

        self._international_area_ind = international_area_ind
