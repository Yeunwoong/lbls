# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.gnss_id import GnssId
from lmf_server.models.positioning_mode import PositioningMode
from lmf_server.models.usage import Usage
from lmf_server import util

from lmf_server.models.gnss_id import GnssId  # noqa: E501
from lmf_server.models.positioning_mode import PositioningMode  # noqa: E501
from lmf_server.models.usage import Usage  # noqa: E501

class GnssPositioningMethodAndUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode=None, gnss=None, usage=None):  # noqa: E501
        """GnssPositioningMethodAndUsage - a model defined in OpenAPI

        :param mode: The mode of this GnssPositioningMethodAndUsage.  # noqa: E501
        :type mode: PositioningMode
        :param gnss: The gnss of this GnssPositioningMethodAndUsage.  # noqa: E501
        :type gnss: GnssId
        :param usage: The usage of this GnssPositioningMethodAndUsage.  # noqa: E501
        :type usage: Usage
        """
        self.openapi_types = {
            'mode': PositioningMode,
            'gnss': GnssId,
            'usage': Usage
        }

        self.attribute_map = {
            'mode': 'mode',
            'gnss': 'gnss',
            'usage': 'usage'
        }

        self._mode = mode
        self._gnss = gnss
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt) -> 'GnssPositioningMethodAndUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GnssPositioningMethodAndUsage of this GnssPositioningMethodAndUsage.  # noqa: E501
        :rtype: GnssPositioningMethodAndUsage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this GnssPositioningMethodAndUsage.


        :return: The mode of this GnssPositioningMethodAndUsage.
        :rtype: PositioningMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GnssPositioningMethodAndUsage.


        :param mode: The mode of this GnssPositioningMethodAndUsage.
        :type mode: PositioningMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def gnss(self):
        """Gets the gnss of this GnssPositioningMethodAndUsage.


        :return: The gnss of this GnssPositioningMethodAndUsage.
        :rtype: GnssId
        """
        return self._gnss

    @gnss.setter
    def gnss(self, gnss):
        """Sets the gnss of this GnssPositioningMethodAndUsage.


        :param gnss: The gnss of this GnssPositioningMethodAndUsage.
        :type gnss: GnssId
        """
        if gnss is None:
            raise ValueError("Invalid value for `gnss`, must not be `None`")  # noqa: E501

        self._gnss = gnss

    @property
    def usage(self):
        """Gets the usage of this GnssPositioningMethodAndUsage.


        :return: The usage of this GnssPositioningMethodAndUsage.
        :rtype: Usage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this GnssPositioningMethodAndUsage.


        :param usage: The usage of this GnssPositioningMethodAndUsage.
        :type usage: Usage
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage
