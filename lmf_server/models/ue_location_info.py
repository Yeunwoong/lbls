# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.geographic_area import GeographicArea
from lmf_server.models.velocity_estimate import VelocityEstimate
from lmf_server import util

from lmf_server.models.geographic_area import GeographicArea  # noqa: E501
from lmf_server.models.velocity_estimate import VelocityEstimate  # noqa: E501

class UELocationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_estimate=None, age_of_location_estimate=None, timestamp_of_location_estimate=None, velocity_estimate=None, age_of_velocity_estimate=None, timestamp_of_velocity_estimate=None):  # noqa: E501
        """UELocationInfo - a model defined in OpenAPI

        :param location_estimate: The location_estimate of this UELocationInfo.  # noqa: E501
        :type location_estimate: GeographicArea
        :param age_of_location_estimate: The age_of_location_estimate of this UELocationInfo.  # noqa: E501
        :type age_of_location_estimate: int
        :param timestamp_of_location_estimate: The timestamp_of_location_estimate of this UELocationInfo.  # noqa: E501
        :type timestamp_of_location_estimate: datetime
        :param velocity_estimate: The velocity_estimate of this UELocationInfo.  # noqa: E501
        :type velocity_estimate: VelocityEstimate
        :param age_of_velocity_estimate: The age_of_velocity_estimate of this UELocationInfo.  # noqa: E501
        :type age_of_velocity_estimate: int
        :param timestamp_of_velocity_estimate: The timestamp_of_velocity_estimate of this UELocationInfo.  # noqa: E501
        :type timestamp_of_velocity_estimate: datetime
        """
        self.openapi_types = {
            'location_estimate': GeographicArea,
            'age_of_location_estimate': int,
            'timestamp_of_location_estimate': datetime,
            'velocity_estimate': VelocityEstimate,
            'age_of_velocity_estimate': int,
            'timestamp_of_velocity_estimate': datetime
        }

        self.attribute_map = {
            'location_estimate': 'locationEstimate',
            'age_of_location_estimate': 'ageOfLocationEstimate',
            'timestamp_of_location_estimate': 'timestampOfLocationEstimate',
            'velocity_estimate': 'velocityEstimate',
            'age_of_velocity_estimate': 'ageOfVelocityEstimate',
            'timestamp_of_velocity_estimate': 'timestampOfVelocityEstimate'
        }

        self._location_estimate = location_estimate
        self._age_of_location_estimate = age_of_location_estimate
        self._timestamp_of_location_estimate = timestamp_of_location_estimate
        self._velocity_estimate = velocity_estimate
        self._age_of_velocity_estimate = age_of_velocity_estimate
        self._timestamp_of_velocity_estimate = timestamp_of_velocity_estimate

    @classmethod
    def from_dict(cls, dikt) -> 'UELocationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UELocationInfo of this UELocationInfo.  # noqa: E501
        :rtype: UELocationInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_estimate(self):
        """Gets the location_estimate of this UELocationInfo.


        :return: The location_estimate of this UELocationInfo.
        :rtype: GeographicArea
        """
        return self._location_estimate

    @location_estimate.setter
    def location_estimate(self, location_estimate):
        """Sets the location_estimate of this UELocationInfo.


        :param location_estimate: The location_estimate of this UELocationInfo.
        :type location_estimate: GeographicArea
        """

        self._location_estimate = location_estimate

    @property
    def age_of_location_estimate(self):
        """Gets the age_of_location_estimate of this UELocationInfo.

        Indicates value of the age of the location estimate.  # noqa: E501

        :return: The age_of_location_estimate of this UELocationInfo.
        :rtype: int
        """
        return self._age_of_location_estimate

    @age_of_location_estimate.setter
    def age_of_location_estimate(self, age_of_location_estimate):
        """Sets the age_of_location_estimate of this UELocationInfo.

        Indicates value of the age of the location estimate.  # noqa: E501

        :param age_of_location_estimate: The age_of_location_estimate of this UELocationInfo.
        :type age_of_location_estimate: int
        """
        if age_of_location_estimate is not None and age_of_location_estimate > 32767:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_estimate`, must be a value less than or equal to `32767`")  # noqa: E501
        if age_of_location_estimate is not None and age_of_location_estimate < 0:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_estimate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age_of_location_estimate = age_of_location_estimate

    @property
    def timestamp_of_location_estimate(self):
        """Gets the timestamp_of_location_estimate of this UELocationInfo.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The timestamp_of_location_estimate of this UELocationInfo.
        :rtype: datetime
        """
        return self._timestamp_of_location_estimate

    @timestamp_of_location_estimate.setter
    def timestamp_of_location_estimate(self, timestamp_of_location_estimate):
        """Sets the timestamp_of_location_estimate of this UELocationInfo.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param timestamp_of_location_estimate: The timestamp_of_location_estimate of this UELocationInfo.
        :type timestamp_of_location_estimate: datetime
        """

        self._timestamp_of_location_estimate = timestamp_of_location_estimate

    @property
    def velocity_estimate(self):
        """Gets the velocity_estimate of this UELocationInfo.


        :return: The velocity_estimate of this UELocationInfo.
        :rtype: VelocityEstimate
        """
        return self._velocity_estimate

    @velocity_estimate.setter
    def velocity_estimate(self, velocity_estimate):
        """Sets the velocity_estimate of this UELocationInfo.


        :param velocity_estimate: The velocity_estimate of this UELocationInfo.
        :type velocity_estimate: VelocityEstimate
        """

        self._velocity_estimate = velocity_estimate

    @property
    def age_of_velocity_estimate(self):
        """Gets the age_of_velocity_estimate of this UELocationInfo.

        Indicates value of the age of the location estimate.  # noqa: E501

        :return: The age_of_velocity_estimate of this UELocationInfo.
        :rtype: int
        """
        return self._age_of_velocity_estimate

    @age_of_velocity_estimate.setter
    def age_of_velocity_estimate(self, age_of_velocity_estimate):
        """Sets the age_of_velocity_estimate of this UELocationInfo.

        Indicates value of the age of the location estimate.  # noqa: E501

        :param age_of_velocity_estimate: The age_of_velocity_estimate of this UELocationInfo.
        :type age_of_velocity_estimate: int
        """
        if age_of_velocity_estimate is not None and age_of_velocity_estimate > 32767:  # noqa: E501
            raise ValueError("Invalid value for `age_of_velocity_estimate`, must be a value less than or equal to `32767`")  # noqa: E501
        if age_of_velocity_estimate is not None and age_of_velocity_estimate < 0:  # noqa: E501
            raise ValueError("Invalid value for `age_of_velocity_estimate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age_of_velocity_estimate = age_of_velocity_estimate

    @property
    def timestamp_of_velocity_estimate(self):
        """Gets the timestamp_of_velocity_estimate of this UELocationInfo.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The timestamp_of_velocity_estimate of this UELocationInfo.
        :rtype: datetime
        """
        return self._timestamp_of_velocity_estimate

    @timestamp_of_velocity_estimate.setter
    def timestamp_of_velocity_estimate(self, timestamp_of_velocity_estimate):
        """Sets the timestamp_of_velocity_estimate of this UELocationInfo.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param timestamp_of_velocity_estimate: The timestamp_of_velocity_estimate of this UELocationInfo.
        :type timestamp_of_velocity_estimate: datetime
        """

        self._timestamp_of_velocity_estimate = timestamp_of_velocity_estimate
