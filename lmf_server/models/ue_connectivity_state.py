# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.access_type import AccessType
from lmf_server.models.cm_state import CmState
from lmf_server import util

from lmf_server.models.access_type import AccessType  # noqa: E501
from lmf_server.models.cm_state import CmState  # noqa: E501

class UeConnectivityState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type=None, connectivitystate=None):  # noqa: E501
        """UeConnectivityState - a model defined in OpenAPI

        :param access_type: The access_type of this UeConnectivityState.  # noqa: E501
        :type access_type: AccessType
        :param connectivitystate: The connectivitystate of this UeConnectivityState.  # noqa: E501
        :type connectivitystate: CmState
        """
        self.openapi_types = {
            'access_type': AccessType,
            'connectivitystate': CmState
        }

        self.attribute_map = {
            'access_type': 'accessType',
            'connectivitystate': 'connectivitystate'
        }

        self._access_type = access_type
        self._connectivitystate = connectivitystate

    @classmethod
    def from_dict(cls, dikt) -> 'UeConnectivityState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UeConnectivityState of this UeConnectivityState.  # noqa: E501
        :rtype: UeConnectivityState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this UeConnectivityState.


        :return: The access_type of this UeConnectivityState.
        :rtype: AccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this UeConnectivityState.


        :param access_type: The access_type of this UeConnectivityState.
        :type access_type: AccessType
        """
        #if access_type is None:
        #    raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def connectivitystate(self):
        """Gets the connectivitystate of this UeConnectivityState.


        :return: The connectivitystate of this UeConnectivityState.
        :rtype: CmState
        """
        return self._connectivitystate

    @connectivitystate.setter
    def connectivitystate(self, connectivitystate):
        """Sets the connectivitystate of this UeConnectivityState.


        :param connectivitystate: The connectivitystate of this UeConnectivityState.
        :type connectivitystate: CmState
        """

        self._connectivitystate = connectivitystate
