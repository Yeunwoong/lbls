# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.lcs_qos_class import LcsQosClass
from lmf_server.models.minor_location_qo_s import MinorLocationQoS
from lmf_server.models.response_time import ResponseTime
from lmf_server import util

from lmf_server.models.lcs_qos_class import LcsQosClass  # noqa: E501
from lmf_server.models.minor_location_qo_s import MinorLocationQoS  # noqa: E501
from lmf_server.models.response_time import ResponseTime  # noqa: E501

class LocationQoS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, h_accuracy=None, v_accuracy=None, vertical_requested=None, response_time=None, minor_loc_qoses=None, lcs_qos_class=None):  # noqa: E501
        """LocationQoS - a model defined in OpenAPI

        :param h_accuracy: The h_accuracy of this LocationQoS.  # noqa: E501
        :type h_accuracy: float
        :param v_accuracy: The v_accuracy of this LocationQoS.  # noqa: E501
        :type v_accuracy: float
        :param vertical_requested: The vertical_requested of this LocationQoS.  # noqa: E501
        :type vertical_requested: bool
        :param response_time: The response_time of this LocationQoS.  # noqa: E501
        :type response_time: ResponseTime
        :param minor_loc_qoses: The minor_loc_qoses of this LocationQoS.  # noqa: E501
        :type minor_loc_qoses: List[MinorLocationQoS]
        :param lcs_qos_class: The lcs_qos_class of this LocationQoS.  # noqa: E501
        :type lcs_qos_class: LcsQosClass
        """
        self.openapi_types = {
            'h_accuracy': float,
            'v_accuracy': float,
            'vertical_requested': bool,
            'response_time': ResponseTime,
            'minor_loc_qoses': List[MinorLocationQoS],
            'lcs_qos_class': LcsQosClass
        }

        self.attribute_map = {
            'h_accuracy': 'hAccuracy',
            'v_accuracy': 'vAccuracy',
            'vertical_requested': 'verticalRequested',
            'response_time': 'responseTime',
            'minor_loc_qoses': 'minorLocQoses',
            'lcs_qos_class': 'lcsQosClass'
        }

        self._h_accuracy = h_accuracy
        self._v_accuracy = v_accuracy
        self._vertical_requested = vertical_requested
        self._response_time = response_time
        self._minor_loc_qoses = minor_loc_qoses
        self._lcs_qos_class = lcs_qos_class

    @classmethod
    def from_dict(cls, dikt) -> 'LocationQoS':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationQoS of this LocationQoS.  # noqa: E501
        :rtype: LocationQoS
        """
        return util.deserialize_model(dikt, cls)

    @property
    def h_accuracy(self):
        """Gets the h_accuracy of this LocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :return: The h_accuracy of this LocationQoS.
        :rtype: float
        """
        return self._h_accuracy

    @h_accuracy.setter
    def h_accuracy(self, h_accuracy):
        """Sets the h_accuracy of this LocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :param h_accuracy: The h_accuracy of this LocationQoS.
        :type h_accuracy: float
        """
        if h_accuracy is not None and h_accuracy < 0:  # noqa: E501
            raise ValueError("Invalid value for `h_accuracy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._h_accuracy = h_accuracy

    @property
    def v_accuracy(self):
        """Gets the v_accuracy of this LocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :return: The v_accuracy of this LocationQoS.
        :rtype: float
        """
        return self._v_accuracy

    @v_accuracy.setter
    def v_accuracy(self, v_accuracy):
        """Sets the v_accuracy of this LocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :param v_accuracy: The v_accuracy of this LocationQoS.
        :type v_accuracy: float
        """
        if v_accuracy is not None and v_accuracy < 0:  # noqa: E501
            raise ValueError("Invalid value for `v_accuracy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._v_accuracy = v_accuracy

    @property
    def vertical_requested(self):
        """Gets the vertical_requested of this LocationQoS.


        :return: The vertical_requested of this LocationQoS.
        :rtype: bool
        """
        return self._vertical_requested

    @vertical_requested.setter
    def vertical_requested(self, vertical_requested):
        """Sets the vertical_requested of this LocationQoS.


        :param vertical_requested: The vertical_requested of this LocationQoS.
        :type vertical_requested: bool
        """

        self._vertical_requested = vertical_requested

    @property
    def response_time(self):
        """Gets the response_time of this LocationQoS.


        :return: The response_time of this LocationQoS.
        :rtype: ResponseTime
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this LocationQoS.


        :param response_time: The response_time of this LocationQoS.
        :type response_time: ResponseTime
        """

        self._response_time = response_time

    @property
    def minor_loc_qoses(self):
        """Gets the minor_loc_qoses of this LocationQoS.


        :return: The minor_loc_qoses of this LocationQoS.
        :rtype: List[MinorLocationQoS]
        """
        return self._minor_loc_qoses

    @minor_loc_qoses.setter
    def minor_loc_qoses(self, minor_loc_qoses):
        """Sets the minor_loc_qoses of this LocationQoS.


        :param minor_loc_qoses: The minor_loc_qoses of this LocationQoS.
        :type minor_loc_qoses: List[MinorLocationQoS]
        """
        if minor_loc_qoses is not None and len(minor_loc_qoses) > 2:
            raise ValueError("Invalid value for `minor_loc_qoses`, number of items must be less than or equal to `2`")  # noqa: E501
        if minor_loc_qoses is not None and len(minor_loc_qoses) < 1:
            raise ValueError("Invalid value for `minor_loc_qoses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._minor_loc_qoses = minor_loc_qoses

    @property
    def lcs_qos_class(self):
        """Gets the lcs_qos_class of this LocationQoS.


        :return: The lcs_qos_class of this LocationQoS.
        :rtype: LcsQosClass
        """
        return self._lcs_qos_class

    @lcs_qos_class.setter
    def lcs_qos_class(self, lcs_qos_class):
        """Sets the lcs_qos_class of this LocationQoS.


        :param lcs_qos_class: The lcs_qos_class of this LocationQoS.
        :type lcs_qos_class: LcsQosClass
        """

        self._lcs_qos_class = lcs_qos_class
