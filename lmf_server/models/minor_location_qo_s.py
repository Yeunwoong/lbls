# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server import util


class MinorLocationQoS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, h_accuracy=None, v_accuracy=None):  # noqa: E501
        """MinorLocationQoS - a model defined in OpenAPI

        :param h_accuracy: The h_accuracy of this MinorLocationQoS.  # noqa: E501
        :type h_accuracy: float
        :param v_accuracy: The v_accuracy of this MinorLocationQoS.  # noqa: E501
        :type v_accuracy: float
        """
        self.openapi_types = {
            'h_accuracy': float,
            'v_accuracy': float
        }

        self.attribute_map = {
            'h_accuracy': 'hAccuracy',
            'v_accuracy': 'vAccuracy'
        }

        self._h_accuracy = h_accuracy
        self._v_accuracy = v_accuracy

    @classmethod
    def from_dict(cls, dikt) -> 'MinorLocationQoS':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MinorLocationQoS of this MinorLocationQoS.  # noqa: E501
        :rtype: MinorLocationQoS
        """
        return util.deserialize_model(dikt, cls)

    @property
    def h_accuracy(self):
        """Gets the h_accuracy of this MinorLocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :return: The h_accuracy of this MinorLocationQoS.
        :rtype: float
        """
        return self._h_accuracy

    @h_accuracy.setter
    def h_accuracy(self, h_accuracy):
        """Sets the h_accuracy of this MinorLocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :param h_accuracy: The h_accuracy of this MinorLocationQoS.
        :type h_accuracy: float
        """
        if h_accuracy is not None and h_accuracy < 0:  # noqa: E501
            raise ValueError("Invalid value for `h_accuracy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._h_accuracy = h_accuracy

    @property
    def v_accuracy(self):
        """Gets the v_accuracy of this MinorLocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :return: The v_accuracy of this MinorLocationQoS.
        :rtype: float
        """
        return self._v_accuracy

    @v_accuracy.setter
    def v_accuracy(self, v_accuracy):
        """Sets the v_accuracy of this MinorLocationQoS.

        Indicates value of accuracy.  # noqa: E501

        :param v_accuracy: The v_accuracy of this MinorLocationQoS.
        :type v_accuracy: float
        """
        if v_accuracy is not None and v_accuracy < 0:  # noqa: E501
            raise ValueError("Invalid value for `v_accuracy`, must be a value greater than or equal to `0`")  # noqa: E501

        self._v_accuracy = v_accuracy
