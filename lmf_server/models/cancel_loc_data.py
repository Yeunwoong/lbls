# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
import re
from lmf_server import util

import re  # noqa: E501

class CancelLocData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hgmlc_call_back_uri=None, ldr_reference=None, supported_features=None):  # noqa: E501
        """CancelLocData - a model defined in OpenAPI

        :param hgmlc_call_back_uri: The hgmlc_call_back_uri of this CancelLocData.  # noqa: E501
        :type hgmlc_call_back_uri: str
        :param ldr_reference: The ldr_reference of this CancelLocData.  # noqa: E501
        :type ldr_reference: str
        :param supported_features: The supported_features of this CancelLocData.  # noqa: E501
        :type supported_features: str
        """
        self.openapi_types = {
            'hgmlc_call_back_uri': str,
            'ldr_reference': str,
            'supported_features': str
        }

        self.attribute_map = {
            'hgmlc_call_back_uri': 'hgmlcCallBackURI',
            'ldr_reference': 'ldrReference',
            'supported_features': 'supportedFeatures'
        }

        self._hgmlc_call_back_uri = hgmlc_call_back_uri
        self._ldr_reference = ldr_reference
        self._supported_features = supported_features

    @classmethod
    def from_dict(cls, dikt) -> 'CancelLocData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CancelLocData of this CancelLocData.  # noqa: E501
        :rtype: CancelLocData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hgmlc_call_back_uri(self):
        """Gets the hgmlc_call_back_uri of this CancelLocData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The hgmlc_call_back_uri of this CancelLocData.
        :rtype: str
        """
        return self._hgmlc_call_back_uri

    @hgmlc_call_back_uri.setter
    def hgmlc_call_back_uri(self, hgmlc_call_back_uri):
        """Sets the hgmlc_call_back_uri of this CancelLocData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param hgmlc_call_back_uri: The hgmlc_call_back_uri of this CancelLocData.
        :type hgmlc_call_back_uri: str
        """
        if hgmlc_call_back_uri is None:
            raise ValueError("Invalid value for `hgmlc_call_back_uri`, must not be `None`")  # noqa: E501

        self._hgmlc_call_back_uri = hgmlc_call_back_uri

    @property
    def ldr_reference(self):
        """Gets the ldr_reference of this CancelLocData.

        LDR Reference.  # noqa: E501

        :return: The ldr_reference of this CancelLocData.
        :rtype: str
        """
        return self._ldr_reference

    @ldr_reference.setter
    def ldr_reference(self, ldr_reference):
        """Sets the ldr_reference of this CancelLocData.

        LDR Reference.  # noqa: E501

        :param ldr_reference: The ldr_reference of this CancelLocData.
        :type ldr_reference: str
        """
        if ldr_reference is None:
            raise ValueError("Invalid value for `ldr_reference`, must not be `None`")  # noqa: E501
        if ldr_reference is not None and len(ldr_reference) > 510:
            raise ValueError("Invalid value for `ldr_reference`, length must be less than or equal to `510`")  # noqa: E501
        if ldr_reference is not None and len(ldr_reference) < 2:
            raise ValueError("Invalid value for `ldr_reference`, length must be greater than or equal to `2`")  # noqa: E501

        self._ldr_reference = ldr_reference

    @property
    def supported_features(self):
        """Gets the supported_features of this CancelLocData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this CancelLocData.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this CancelLocData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this CancelLocData.
        :type supported_features: str
        """
        #if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
        #    raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features
