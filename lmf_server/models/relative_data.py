# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
import re
from lmf_server import util

import re  # noqa: E501

class RelativeData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amf_id=None, supi=None, pei=None, gpsi=None, radius='false'):  # noqa: E501
        """RelativeData - a model defined in OpenAPI

        :param amf_id: The amf_id of this RelativeData.  # noqa: E501
        :type amf_id: str
        :param supi: The supi of this RelativeData.  # noqa: E501
        :type supi: str
        :param pei: The pei of this RelativeData.  # noqa: E501
        :type pei: str
        :param gpsi: The gpsi of this RelativeData.  # noqa: E501
        :type gpsi: str
        :param radius: The radius of this RelativeData.  # noqa: E501
        :type radius: str
        """
        self.openapi_types = {
            'amf_id': str,
            'supi': str,
            'pei': str,
            'gpsi': str,
            'radius': str
        }

        self.attribute_map = {
            'amf_id': 'amfId',
            'supi': 'supi',
            'pei': 'pei',
            'gpsi': 'gpsi',
            'radius': 'radius'
        }

        self._amf_id = amf_id
        self._supi = supi
        self._pei = pei
        self._gpsi = gpsi
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt) -> 'RelativeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RelativeData of this RelativeData.  # noqa: E501
        :rtype: RelativeData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amf_id(self):
        """Gets the amf_id of this RelativeData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The amf_id of this RelativeData.
        :rtype: str
        """
        return self._amf_id

    @amf_id.setter
    def amf_id(self, amf_id):
        """Sets the amf_id of this RelativeData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param amf_id: The amf_id of this RelativeData.
        :type amf_id: str
        """

        self._amf_id = amf_id

    @property
    def supi(self):
        """Gets the supi of this RelativeData.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this RelativeData.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this RelativeData.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this RelativeData.
        :type supi: str
        """
        if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
            raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def pei(self):
        """Gets the pei of this RelativeData.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :return: The pei of this RelativeData.
        :rtype: str
        """
        return self._pei

    @pei.setter
    def pei(self, pei):
        """Sets the pei of this RelativeData.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :param pei: The pei of this RelativeData.
        :type pei: str
        """
        if pei is not None and not re.search(r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$', pei):  # noqa: E501
            raise ValueError("Invalid value for `pei`, must be a follow pattern or equal to `/^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/`")  # noqa: E501

        self._pei = pei

    @property
    def gpsi(self):
        """Gets the gpsi of this RelativeData.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this RelativeData.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this RelativeData.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this RelativeData.
        :type gpsi: str
        """
        if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
            raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def radius(self):
        """Gets the radius of this RelativeData.


        :return: The radius of this RelativeData.
        :rtype: str
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this RelativeData.


        :param radius: The radius of this RelativeData.
        :type radius: str
        """

        self._radius = radius
