# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.storage_outcome import StorageOutcome
from lmf_server import util

from lmf_server.models.storage_outcome import StorageOutcome  # noqa: E501

class CipheringSetReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphering_set_id=None, storage_outcome=None):  # noqa: E501
        """CipheringSetReport - a model defined in OpenAPI

        :param ciphering_set_id: The ciphering_set_id of this CipheringSetReport.  # noqa: E501
        :type ciphering_set_id: int
        :param storage_outcome: The storage_outcome of this CipheringSetReport.  # noqa: E501
        :type storage_outcome: StorageOutcome
        """
        self.openapi_types = {
            'ciphering_set_id': int,
            'storage_outcome': StorageOutcome
        }

        self.attribute_map = {
            'ciphering_set_id': 'cipheringSetID',
            'storage_outcome': 'storageOutcome'
        }

        self._ciphering_set_id = ciphering_set_id
        self._storage_outcome = storage_outcome

    @classmethod
    def from_dict(cls, dikt) -> 'CipheringSetReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CipheringSetReport of this CipheringSetReport.  # noqa: E501
        :rtype: CipheringSetReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphering_set_id(self):
        """Gets the ciphering_set_id of this CipheringSetReport.

        Ciphering Data Set Identifier.  # noqa: E501

        :return: The ciphering_set_id of this CipheringSetReport.
        :rtype: int
        """
        return self._ciphering_set_id

    @ciphering_set_id.setter
    def ciphering_set_id(self, ciphering_set_id):
        """Sets the ciphering_set_id of this CipheringSetReport.

        Ciphering Data Set Identifier.  # noqa: E501

        :param ciphering_set_id: The ciphering_set_id of this CipheringSetReport.
        :type ciphering_set_id: int
        """
        if ciphering_set_id is None:
            raise ValueError("Invalid value for `ciphering_set_id`, must not be `None`")  # noqa: E501
        if ciphering_set_id is not None and ciphering_set_id > 65535:  # noqa: E501
            raise ValueError("Invalid value for `ciphering_set_id`, must be a value less than or equal to `65535`")  # noqa: E501
        if ciphering_set_id is not None and ciphering_set_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `ciphering_set_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ciphering_set_id = ciphering_set_id

    @property
    def storage_outcome(self):
        """Gets the storage_outcome of this CipheringSetReport.


        :return: The storage_outcome of this CipheringSetReport.
        :rtype: StorageOutcome
        """
        return self._storage_outcome

    @storage_outcome.setter
    def storage_outcome(self, storage_outcome):
        """Sets the storage_outcome of this CipheringSetReport.


        :param storage_outcome: The storage_outcome of this CipheringSetReport.
        :type storage_outcome: StorageOutcome
        """
        if storage_outcome is None:
            raise ValueError("Invalid value for `storage_outcome`, must not be `None`")  # noqa: E501

        self._storage_outcome = storage_outcome
