# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.accuracy_fulfilment_indicator import AccuracyFulfilmentIndicator
from lmf_server.models.civic_address import CivicAddress
from lmf_server.models.ecgi import Ecgi
from lmf_server.models.geographic_area import GeographicArea
from lmf_server.models.gnss_positioning_method_and_usage import GnssPositioningMethodAndUsage
from lmf_server.models.local_area import LocalArea
from lmf_server.models.minor_location_qo_s import MinorLocationQoS
from lmf_server.models.ncgi import Ncgi
from lmf_server.models.positioning_method_and_usage import PositioningMethodAndUsage
from lmf_server.models.ue_area_indication import UeAreaIndication
from lmf_server.models.velocity_estimate import VelocityEstimate
import re
from lmf_server import util

from lmf_server.models.accuracy_fulfilment_indicator import AccuracyFulfilmentIndicator  # noqa: E501
from lmf_server.models.civic_address import CivicAddress  # noqa: E501
from lmf_server.models.ecgi import Ecgi  # noqa: E501
from lmf_server.models.geographic_area import GeographicArea  # noqa: E501
from lmf_server.models.gnss_positioning_method_and_usage import GnssPositioningMethodAndUsage  # noqa: E501
from lmf_server.models.local_area import LocalArea  # noqa: E501
from lmf_server.models.minor_location_qo_s import MinorLocationQoS  # noqa: E501
from lmf_server.models.ncgi import Ncgi  # noqa: E501
from lmf_server.models.positioning_method_and_usage import PositioningMethodAndUsage  # noqa: E501
from lmf_server.models.ue_area_indication import UeAreaIndication  # noqa: E501
from lmf_server.models.velocity_estimate import VelocityEstimate  # noqa: E501
import re  # noqa: E501

class LocationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_estimate=None, accuracy_fulfilment_indicator=None, age_of_location_estimate=None, timestamp_of_location_estimate=None, velocity_estimate=None, civic_address=None, local_location_estimate=None, positioning_data_list=None, gnss_positioning_data_list=None, ecgi=None, ncgi=None, altitude=None, barometric_pressure=None, serving_lmf_identification=None, ue_positioning_cap=None, ue_area_ind=None, supported_features=None, achieved_qos=None, direct_report_ind=False):  # noqa: E501
        """LocationData - a model defined in OpenAPI

        :param location_estimate: The location_estimate of this LocationData.  # noqa: E501
        :type location_estimate: GeographicArea
        :param accuracy_fulfilment_indicator: The accuracy_fulfilment_indicator of this LocationData.  # noqa: E501
        :type accuracy_fulfilment_indicator: AccuracyFulfilmentIndicator
        :param age_of_location_estimate: The age_of_location_estimate of this LocationData.  # noqa: E501
        :type age_of_location_estimate: int
        :param timestamp_of_location_estimate: The timestamp_of_location_estimate of this LocationData.  # noqa: E501
        :type timestamp_of_location_estimate: datetime
        :param velocity_estimate: The velocity_estimate of this LocationData.  # noqa: E501
        :type velocity_estimate: VelocityEstimate
        :param civic_address: The civic_address of this LocationData.  # noqa: E501
        :type civic_address: CivicAddress
        :param local_location_estimate: The local_location_estimate of this LocationData.  # noqa: E501
        :type local_location_estimate: LocalArea
        :param positioning_data_list: The positioning_data_list of this LocationData.  # noqa: E501
        :type positioning_data_list: List[PositioningMethodAndUsage]
        :param gnss_positioning_data_list: The gnss_positioning_data_list of this LocationData.  # noqa: E501
        :type gnss_positioning_data_list: List[GnssPositioningMethodAndUsage]
        :param ecgi: The ecgi of this LocationData.  # noqa: E501
        :type ecgi: Ecgi
        :param ncgi: The ncgi of this LocationData.  # noqa: E501
        :type ncgi: Ncgi
        :param altitude: The altitude of this LocationData.  # noqa: E501
        :type altitude: float
        :param barometric_pressure: The barometric_pressure of this LocationData.  # noqa: E501
        :type barometric_pressure: int
        :param serving_lmf_identification: The serving_lmf_identification of this LocationData.  # noqa: E501
        :type serving_lmf_identification: str
        :param ue_positioning_cap: The ue_positioning_cap of this LocationData.  # noqa: E501
        :type ue_positioning_cap: str
        :param ue_area_ind: The ue_area_ind of this LocationData.  # noqa: E501
        :type ue_area_ind: UeAreaIndication
        :param supported_features: The supported_features of this LocationData.  # noqa: E501
        :type supported_features: str
        :param achieved_qos: The achieved_qos of this LocationData.  # noqa: E501
        :type achieved_qos: MinorLocationQoS
        :param direct_report_ind: The direct_report_ind of this LocationData.  # noqa: E501
        :type direct_report_ind: bool
        """
        self.openapi_types = {
            'location_estimate': GeographicArea,
            'accuracy_fulfilment_indicator': AccuracyFulfilmentIndicator,
            'age_of_location_estimate': int,
            'timestamp_of_location_estimate': datetime,
            'velocity_estimate': VelocityEstimate,
            'civic_address': CivicAddress,
            'local_location_estimate': LocalArea,
            'positioning_data_list': List[PositioningMethodAndUsage],
            'gnss_positioning_data_list': List[GnssPositioningMethodAndUsage],
            'ecgi': Ecgi,
            'ncgi': Ncgi,
            'altitude': float,
            'barometric_pressure': int,
            'serving_lmf_identification': str,
            'ue_positioning_cap': str,
            'ue_area_ind': UeAreaIndication,
            'supported_features': str,
            'achieved_qos': MinorLocationQoS,
            'direct_report_ind': bool
        }

        self.attribute_map = {
            'location_estimate': 'locationEstimate',
            'accuracy_fulfilment_indicator': 'accuracyFulfilmentIndicator',
            'age_of_location_estimate': 'ageOfLocationEstimate',
            'timestamp_of_location_estimate': 'timestampOfLocationEstimate',
            'velocity_estimate': 'velocityEstimate',
            'civic_address': 'civicAddress',
            'local_location_estimate': 'localLocationEstimate',
            'positioning_data_list': 'positioningDataList',
            'gnss_positioning_data_list': 'gnssPositioningDataList',
            'ecgi': 'ecgi',
            'ncgi': 'ncgi',
            'altitude': 'altitude',
            'barometric_pressure': 'barometricPressure',
            'serving_lmf_identification': 'servingLMFIdentification',
            'ue_positioning_cap': 'uePositioningCap',
            'ue_area_ind': 'ueAreaInd',
            'supported_features': 'supportedFeatures',
            'achieved_qos': 'achievedQos',
            'direct_report_ind': 'directReportInd'
        }

        self._location_estimate = location_estimate
        self._accuracy_fulfilment_indicator = accuracy_fulfilment_indicator
        self._age_of_location_estimate = age_of_location_estimate
        self._timestamp_of_location_estimate = timestamp_of_location_estimate
        self._velocity_estimate = velocity_estimate
        self._civic_address = civic_address
        self._local_location_estimate = local_location_estimate
        self._positioning_data_list = positioning_data_list
        self._gnss_positioning_data_list = gnss_positioning_data_list
        self._ecgi = ecgi
        self._ncgi = ncgi
        self._altitude = altitude
        self._barometric_pressure = barometric_pressure
        self._serving_lmf_identification = serving_lmf_identification
        self._ue_positioning_cap = ue_positioning_cap
        self._ue_area_ind = ue_area_ind
        self._supported_features = supported_features
        self._achieved_qos = achieved_qos
        self._direct_report_ind = direct_report_ind

    @classmethod
    def from_dict(cls, dikt) -> 'LocationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationData of this LocationData.  # noqa: E501
        :rtype: LocationData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_estimate(self):
        """Gets the location_estimate of this LocationData.


        :return: The location_estimate of this LocationData.
        :rtype: GeographicArea
        """
        return self._location_estimate

    @location_estimate.setter
    def location_estimate(self, location_estimate):
        """Sets the location_estimate of this LocationData.


        :param location_estimate: The location_estimate of this LocationData.
        :type location_estimate: GeographicArea
        """
        if location_estimate is None:
            raise ValueError("Invalid value for `location_estimate`, must not be `None`")  # noqa: E501

        self._location_estimate = location_estimate

    @property
    def accuracy_fulfilment_indicator(self):
        """Gets the accuracy_fulfilment_indicator of this LocationData.


        :return: The accuracy_fulfilment_indicator of this LocationData.
        :rtype: AccuracyFulfilmentIndicator
        """
        return self._accuracy_fulfilment_indicator

    @accuracy_fulfilment_indicator.setter
    def accuracy_fulfilment_indicator(self, accuracy_fulfilment_indicator):
        """Sets the accuracy_fulfilment_indicator of this LocationData.


        :param accuracy_fulfilment_indicator: The accuracy_fulfilment_indicator of this LocationData.
        :type accuracy_fulfilment_indicator: AccuracyFulfilmentIndicator
        """

        self._accuracy_fulfilment_indicator = accuracy_fulfilment_indicator

    @property
    def age_of_location_estimate(self):
        """Gets the age_of_location_estimate of this LocationData.

        Indicates value of the age of the location estimate.  # noqa: E501

        :return: The age_of_location_estimate of this LocationData.
        :rtype: int
        """
        return self._age_of_location_estimate

    @age_of_location_estimate.setter
    def age_of_location_estimate(self, age_of_location_estimate):
        """Sets the age_of_location_estimate of this LocationData.

        Indicates value of the age of the location estimate.  # noqa: E501

        :param age_of_location_estimate: The age_of_location_estimate of this LocationData.
        :type age_of_location_estimate: int
        """
        if age_of_location_estimate is not None and age_of_location_estimate > 32767:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_estimate`, must be a value less than or equal to `32767`")  # noqa: E501
        if age_of_location_estimate is not None and age_of_location_estimate < 0:  # noqa: E501
            raise ValueError("Invalid value for `age_of_location_estimate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age_of_location_estimate = age_of_location_estimate

    @property
    def timestamp_of_location_estimate(self):
        """Gets the timestamp_of_location_estimate of this LocationData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The timestamp_of_location_estimate of this LocationData.
        :rtype: datetime
        """
        return self._timestamp_of_location_estimate

    @timestamp_of_location_estimate.setter
    def timestamp_of_location_estimate(self, timestamp_of_location_estimate):
        """Sets the timestamp_of_location_estimate of this LocationData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param timestamp_of_location_estimate: The timestamp_of_location_estimate of this LocationData.
        :type timestamp_of_location_estimate: datetime
        """

        self._timestamp_of_location_estimate = timestamp_of_location_estimate

    @property
    def velocity_estimate(self):
        """Gets the velocity_estimate of this LocationData.


        :return: The velocity_estimate of this LocationData.
        :rtype: VelocityEstimate
        """
        return self._velocity_estimate

    @velocity_estimate.setter
    def velocity_estimate(self, velocity_estimate):
        """Sets the velocity_estimate of this LocationData.


        :param velocity_estimate: The velocity_estimate of this LocationData.
        :type velocity_estimate: VelocityEstimate
        """

        self._velocity_estimate = velocity_estimate

    @property
    def civic_address(self):
        """Gets the civic_address of this LocationData.


        :return: The civic_address of this LocationData.
        :rtype: CivicAddress
        """
        return self._civic_address

    @civic_address.setter
    def civic_address(self, civic_address):
        """Sets the civic_address of this LocationData.


        :param civic_address: The civic_address of this LocationData.
        :type civic_address: CivicAddress
        """

        self._civic_address = civic_address

    @property
    def local_location_estimate(self):
        """Gets the local_location_estimate of this LocationData.


        :return: The local_location_estimate of this LocationData.
        :rtype: LocalArea
        """
        return self._local_location_estimate

    @local_location_estimate.setter
    def local_location_estimate(self, local_location_estimate):
        """Sets the local_location_estimate of this LocationData.


        :param local_location_estimate: The local_location_estimate of this LocationData.
        :type local_location_estimate: LocalArea
        """

        self._local_location_estimate = local_location_estimate

    @property
    def positioning_data_list(self):
        """Gets the positioning_data_list of this LocationData.


        :return: The positioning_data_list of this LocationData.
        :rtype: List[PositioningMethodAndUsage]
        """
        return self._positioning_data_list

    @positioning_data_list.setter
    def positioning_data_list(self, positioning_data_list):
        """Sets the positioning_data_list of this LocationData.


        :param positioning_data_list: The positioning_data_list of this LocationData.
        :type positioning_data_list: List[PositioningMethodAndUsage]
        """
        if positioning_data_list is not None and len(positioning_data_list) < 1:
            raise ValueError("Invalid value for `positioning_data_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._positioning_data_list = positioning_data_list

    @property
    def gnss_positioning_data_list(self):
        """Gets the gnss_positioning_data_list of this LocationData.


        :return: The gnss_positioning_data_list of this LocationData.
        :rtype: List[GnssPositioningMethodAndUsage]
        """
        return self._gnss_positioning_data_list

    @gnss_positioning_data_list.setter
    def gnss_positioning_data_list(self, gnss_positioning_data_list):
        """Sets the gnss_positioning_data_list of this LocationData.


        :param gnss_positioning_data_list: The gnss_positioning_data_list of this LocationData.
        :type gnss_positioning_data_list: List[GnssPositioningMethodAndUsage]
        """
        if gnss_positioning_data_list is not None and len(gnss_positioning_data_list) < 1:
            raise ValueError("Invalid value for `gnss_positioning_data_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gnss_positioning_data_list = gnss_positioning_data_list

    @property
    def ecgi(self):
        """Gets the ecgi of this LocationData.


        :return: The ecgi of this LocationData.
        :rtype: Ecgi
        """
        return self._ecgi

    @ecgi.setter
    def ecgi(self, ecgi):
        """Sets the ecgi of this LocationData.


        :param ecgi: The ecgi of this LocationData.
        :type ecgi: Ecgi
        """

        self._ecgi = ecgi

    @property
    def ncgi(self):
        """Gets the ncgi of this LocationData.


        :return: The ncgi of this LocationData.
        :rtype: Ncgi
        """
        return self._ncgi

    @ncgi.setter
    def ncgi(self, ncgi):
        """Sets the ncgi of this LocationData.


        :param ncgi: The ncgi of this LocationData.
        :type ncgi: Ncgi
        """

        self._ncgi = ncgi

    @property
    def altitude(self):
        """Gets the altitude of this LocationData.

        Indicates value of altitude.  # noqa: E501

        :return: The altitude of this LocationData.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this LocationData.

        Indicates value of altitude.  # noqa: E501

        :param altitude: The altitude of this LocationData.
        :type altitude: float
        """
        if altitude is not None and altitude > 32767:  # noqa: E501
            raise ValueError("Invalid value for `altitude`, must be a value less than or equal to `32767`")  # noqa: E501
        if altitude is not None and altitude < -32767:  # noqa: E501
            raise ValueError("Invalid value for `altitude`, must be a value greater than or equal to `-32767`")  # noqa: E501

        self._altitude = altitude

    @property
    def barometric_pressure(self):
        """Gets the barometric_pressure of this LocationData.

        Specifies the measured uncompensated atmospheric pressure.  # noqa: E501

        :return: The barometric_pressure of this LocationData.
        :rtype: int
        """
        return self._barometric_pressure

    @barometric_pressure.setter
    def barometric_pressure(self, barometric_pressure):
        """Sets the barometric_pressure of this LocationData.

        Specifies the measured uncompensated atmospheric pressure.  # noqa: E501

        :param barometric_pressure: The barometric_pressure of this LocationData.
        :type barometric_pressure: int
        """
        if barometric_pressure is not None and barometric_pressure > 115000:  # noqa: E501
            raise ValueError("Invalid value for `barometric_pressure`, must be a value less than or equal to `115000`")  # noqa: E501
        if barometric_pressure is not None and barometric_pressure < 30000:  # noqa: E501
            raise ValueError("Invalid value for `barometric_pressure`, must be a value greater than or equal to `30000`")  # noqa: E501

        self._barometric_pressure = barometric_pressure

    @property
    def serving_lmf_identification(self):
        """Gets the serving_lmf_identification of this LocationData.

        LMF identification.  # noqa: E501

        :return: The serving_lmf_identification of this LocationData.
        :rtype: str
        """
        return self._serving_lmf_identification

    @serving_lmf_identification.setter
    def serving_lmf_identification(self, serving_lmf_identification):
        """Sets the serving_lmf_identification of this LocationData.

        LMF identification.  # noqa: E501

        :param serving_lmf_identification: The serving_lmf_identification of this LocationData.
        :type serving_lmf_identification: str
        """

        self._serving_lmf_identification = serving_lmf_identification

    @property
    def ue_positioning_cap(self):
        """Gets the ue_positioning_cap of this LocationData.

        Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).  # noqa: E501

        :return: The ue_positioning_cap of this LocationData.
        :rtype: str
        """
        return self._ue_positioning_cap

    @ue_positioning_cap.setter
    def ue_positioning_cap(self, ue_positioning_cap):
        """Sets the ue_positioning_cap of this LocationData.

        Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).  # noqa: E501

        :param ue_positioning_cap: The ue_positioning_cap of this LocationData.
        :type ue_positioning_cap: str
        """

        self._ue_positioning_cap = ue_positioning_cap

    @property
    def ue_area_ind(self):
        """Gets the ue_area_ind of this LocationData.


        :return: The ue_area_ind of this LocationData.
        :rtype: UeAreaIndication
        """
        return self._ue_area_ind

    @ue_area_ind.setter
    def ue_area_ind(self, ue_area_ind):
        """Sets the ue_area_ind of this LocationData.


        :param ue_area_ind: The ue_area_ind of this LocationData.
        :type ue_area_ind: UeAreaIndication
        """

        self._ue_area_ind = ue_area_ind

    @property
    def supported_features(self):
        """Gets the supported_features of this LocationData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this LocationData.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this LocationData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this LocationData.
        :type supported_features: str
        """
        #if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
        #    raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def achieved_qos(self):
        """Gets the achieved_qos of this LocationData.


        :return: The achieved_qos of this LocationData.
        :rtype: MinorLocationQoS
        """
        return self._achieved_qos

    @achieved_qos.setter
    def achieved_qos(self, achieved_qos):
        """Sets the achieved_qos of this LocationData.


        :param achieved_qos: The achieved_qos of this LocationData.
        :type achieved_qos: MinorLocationQoS
        """

        self._achieved_qos = achieved_qos

    @property
    def direct_report_ind(self):
        """Gets the direct_report_ind of this LocationData.


        :return: The direct_report_ind of this LocationData.
        :rtype: bool
        """
        return self._direct_report_ind

    @direct_report_ind.setter
    def direct_report_ind(self, direct_report_ind):
        """Sets the direct_report_ind of this LocationData.


        :param direct_report_ind: The direct_report_ind of this LocationData.
        :type direct_report_ind: bool
        """

        self._direct_report_ind = direct_report_ind
