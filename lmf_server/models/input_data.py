# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from lmf_server.models.base_model_ import Model
from lmf_server.models.area_event_info import AreaEventInfo
from lmf_server.models.ecgi import Ecgi
from lmf_server.models.external_client_type import ExternalClientType
from lmf_server.models.lcs_broadcast_assistance_types_data import LcsBroadcastAssistanceTypesData
from lmf_server.models.lcs_priority import LcsPriority
from lmf_server.models.ldr_type import LdrType
from lmf_server.models.location_qo_s import LocationQoS
from lmf_server.models.lp_hap_type import LpHapType
from lmf_server.models.motion_event_info import MotionEventInfo
from lmf_server.models.ncgi import Ncgi
from lmf_server.models.periodic_event_info import PeriodicEventInfo
from lmf_server.models.ref_to_binary_data import RefToBinaryData
from lmf_server.models.reporting_access_type import ReportingAccessType
from lmf_server.models.reporting_area import ReportingArea
from lmf_server.models.supported_gad_shapes import SupportedGADShapes
from lmf_server.models.tnap_id import TnapId
from lmf_server.models.twap_id import TwapId
from lmf_server.models.ue_connectivity_state import UeConnectivityState
from lmf_server.models.ue_lcs_capability import UeLcsCapability
from lmf_server.models.ue_location_service_ind import UeLocationServiceInd
from lmf_server.models.velocity_requested import VelocityRequested
import re
from lmf_server import util

from lmf_server.models.area_event_info import AreaEventInfo  # noqa: E501
from lmf_server.models.ecgi import Ecgi  # noqa: E501
from lmf_server.models.external_client_type import ExternalClientType  # noqa: E501
from lmf_server.models.lcs_broadcast_assistance_types_data import LcsBroadcastAssistanceTypesData  # noqa: E501
from lmf_server.models.lcs_priority import LcsPriority  # noqa: E501
from lmf_server.models.ldr_type import LdrType  # noqa: E501
from lmf_server.models.location_qo_s import LocationQoS  # noqa: E501
from lmf_server.models.lp_hap_type import LpHapType  # noqa: E501
from lmf_server.models.motion_event_info import MotionEventInfo  # noqa: E501
from lmf_server.models.ncgi import Ncgi  # noqa: E501
from lmf_server.models.periodic_event_info import PeriodicEventInfo  # noqa: E501
from lmf_server.models.ref_to_binary_data import RefToBinaryData  # noqa: E501
from lmf_server.models.reporting_access_type import ReportingAccessType  # noqa: E501
from lmf_server.models.reporting_area import ReportingArea  # noqa: E501
from lmf_server.models.supported_gad_shapes import SupportedGADShapes  # noqa: E501
from lmf_server.models.tnap_id import TnapId  # noqa: E501
from lmf_server.models.twap_id import TwapId  # noqa: E501
from lmf_server.models.ue_connectivity_state import UeConnectivityState  # noqa: E501
from lmf_server.models.ue_lcs_capability import UeLcsCapability  # noqa: E501
from lmf_server.models.ue_location_service_ind import UeLocationServiceInd  # noqa: E501
from lmf_server.models.velocity_requested import VelocityRequested  # noqa: E501
import re  # noqa: E501

class InputData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_client_type=None, correlation_id=None, amf_id=None, location_qo_s=None, supported_gad_shapes=None, supi=None, pei=None, gpsi=None, ecgi=None, ecgi_on_second_node=None, ncgi=None, ncgi_on_second_node=None, priority=None, velocity_requested=None, ue_lcs_cap=None, lcs_service_type=None, ldr_type=None, hgmlc_call_back_uri=None, lir_gmlc_call_back_uri=None, vgmlc_address=None, ldr_reference=None, lir_reference=None, periodic_event_info=None, area_event_info=None, motion_event_info=None, reporting_access_types=None, ue_connectivity_states=None, ue_location_service_ind=None, mo_assistance_data_types=None, lpp_message=None, lpp_message_ext=None, supported_features=None, ue_positioning_cap=None, tnap_id=None, twap_id=None, ue_country_det_ind=None, scheduled_loc_time=None, reliable_loc_req=False, evt_rpt_allowed_areas=None, ue_unaware_ind=None, intermediate_location_ind=False, max_resp_time=None, lp_hap_type=None):  # noqa: E501
        """InputData - a model defined in OpenAPI

        :param external_client_type: The external_client_type of this InputData.  # noqa: E501
        :type external_client_type: ExternalClientType
        :param correlation_id: The correlation_id of this InputData.  # noqa: E501
        :type correlation_id: str
        :param amf_id: The amf_id of this InputData.  # noqa: E501
        :type amf_id: str
        :param location_qo_s: The location_qo_s of this InputData.  # noqa: E501
        :type location_qo_s: LocationQoS
        :param supported_gad_shapes: The supported_gad_shapes of this InputData.  # noqa: E501
        :type supported_gad_shapes: List[SupportedGADShapes]
        :param supi: The supi of this InputData.  # noqa: E501
        :type supi: str
        :param pei: The pei of this InputData.  # noqa: E501
        :type pei: str
        :param gpsi: The gpsi of this InputData.  # noqa: E501
        :type gpsi: str
        :param ecgi: The ecgi of this InputData.  # noqa: E501
        :type ecgi: Ecgi
        :param ecgi_on_second_node: The ecgi_on_second_node of this InputData.  # noqa: E501
        :type ecgi_on_second_node: Ecgi
        :param ncgi: The ncgi of this InputData.  # noqa: E501
        :type ncgi: Ncgi
        :param ncgi_on_second_node: The ncgi_on_second_node of this InputData.  # noqa: E501
        :type ncgi_on_second_node: Ncgi
        :param priority: The priority of this InputData.  # noqa: E501
        :type priority: LcsPriority
        :param velocity_requested: The velocity_requested of this InputData.  # noqa: E501
        :type velocity_requested: VelocityRequested
        :param ue_lcs_cap: The ue_lcs_cap of this InputData.  # noqa: E501
        :type ue_lcs_cap: UeLcsCapability
        :param lcs_service_type: The lcs_service_type of this InputData.  # noqa: E501
        :type lcs_service_type: int
        :param ldr_type: The ldr_type of this InputData.  # noqa: E501
        :type ldr_type: LdrType
        :param hgmlc_call_back_uri: The hgmlc_call_back_uri of this InputData.  # noqa: E501
        :type hgmlc_call_back_uri: str
        :param lir_gmlc_call_back_uri: The lir_gmlc_call_back_uri of this InputData.  # noqa: E501
        :type lir_gmlc_call_back_uri: str
        :param vgmlc_address: The vgmlc_address of this InputData.  # noqa: E501
        :type vgmlc_address: str
        :param ldr_reference: The ldr_reference of this InputData.  # noqa: E501
        :type ldr_reference: str
        :param lir_reference: The lir_reference of this InputData.  # noqa: E501
        :type lir_reference: str
        :param periodic_event_info: The periodic_event_info of this InputData.  # noqa: E501
        :type periodic_event_info: PeriodicEventInfo
        :param area_event_info: The area_event_info of this InputData.  # noqa: E501
        :type area_event_info: AreaEventInfo
        :param motion_event_info: The motion_event_info of this InputData.  # noqa: E501
        :type motion_event_info: MotionEventInfo
        :param reporting_access_types: The reporting_access_types of this InputData.  # noqa: E501
        :type reporting_access_types: List[ReportingAccessType]
        :param ue_connectivity_states: The ue_connectivity_states of this InputData.  # noqa: E501
        :type ue_connectivity_states: UeConnectivityState
        :param ue_location_service_ind: The ue_location_service_ind of this InputData.  # noqa: E501
        :type ue_location_service_ind: UeLocationServiceInd
        :param mo_assistance_data_types: The mo_assistance_data_types of this InputData.  # noqa: E501
        :type mo_assistance_data_types: LcsBroadcastAssistanceTypesData
        :param lpp_message: The lpp_message of this InputData.  # noqa: E501
        :type lpp_message: RefToBinaryData
        :param lpp_message_ext: The lpp_message_ext of this InputData.  # noqa: E501
        :type lpp_message_ext: List[RefToBinaryData]
        :param supported_features: The supported_features of this InputData.  # noqa: E501
        :type supported_features: str
        :param ue_positioning_cap: The ue_positioning_cap of this InputData.  # noqa: E501
        :type ue_positioning_cap: str
        :param tnap_id: The tnap_id of this InputData.  # noqa: E501
        :type tnap_id: TnapId
        :param twap_id: The twap_id of this InputData.  # noqa: E501
        :type twap_id: TwapId
        :param ue_country_det_ind: The ue_country_det_ind of this InputData.  # noqa: E501
        :type ue_country_det_ind: bool
        :param scheduled_loc_time: The scheduled_loc_time of this InputData.  # noqa: E501
        :type scheduled_loc_time: datetime
        :param reliable_loc_req: The reliable_loc_req of this InputData.  # noqa: E501
        :type reliable_loc_req: bool
        :param evt_rpt_allowed_areas: The evt_rpt_allowed_areas of this InputData.  # noqa: E501
        :type evt_rpt_allowed_areas: List[ReportingArea]
        :param ue_unaware_ind: The ue_unaware_ind of this InputData.  # noqa: E501
        :type ue_unaware_ind: bool
        :param intermediate_location_ind: The intermediate_location_ind of this InputData.  # noqa: E501
        :type intermediate_location_ind: bool
        :param max_resp_time: The max_resp_time of this InputData.  # noqa: E501
        :type max_resp_time: int
        :param lp_hap_type: The lp_hap_type of this InputData.  # noqa: E501
        :type lp_hap_type: LpHapType
        """
        self.openapi_types = {
            'external_client_type': ExternalClientType,
            'correlation_id': str,
            'amf_id': str,
            'location_qo_s': LocationQoS,
            'supported_gad_shapes': List[SupportedGADShapes],
            'supi': str,
            'pei': str,
            'gpsi': str,
            'ecgi': Ecgi,
            'ecgi_on_second_node': Ecgi,
            'ncgi': Ncgi,
            'ncgi_on_second_node': Ncgi,
            'priority': LcsPriority,
            'velocity_requested': VelocityRequested,
            'ue_lcs_cap': UeLcsCapability,
            'lcs_service_type': int,
            'ldr_type': LdrType,
            'hgmlc_call_back_uri': str,
            'lir_gmlc_call_back_uri': str,
            'vgmlc_address': str,
            'ldr_reference': str,
            'lir_reference': str,
            'periodic_event_info': PeriodicEventInfo,
            'area_event_info': AreaEventInfo,
            'motion_event_info': MotionEventInfo,
            'reporting_access_types': List[ReportingAccessType],
            'ue_connectivity_states': UeConnectivityState,
            'ue_location_service_ind': UeLocationServiceInd,
            'mo_assistance_data_types': LcsBroadcastAssistanceTypesData,
            'lpp_message': RefToBinaryData,
            'lpp_message_ext': List[RefToBinaryData],
            'supported_features': str,
            'ue_positioning_cap': str,
            'tnap_id': TnapId,
            'twap_id': TwapId,
            'ue_country_det_ind': bool,
            'scheduled_loc_time': datetime,
            'reliable_loc_req': bool,
            'evt_rpt_allowed_areas': List[ReportingArea],
            'ue_unaware_ind': bool,
            'intermediate_location_ind': bool,
            'max_resp_time': int,
            'lp_hap_type': LpHapType
        }

        self.attribute_map = {
            'external_client_type': 'externalClientType',
            'correlation_id': 'correlationID',
            'amf_id': 'amfId',
            'location_qo_s': 'locationQoS',
            'supported_gad_shapes': 'supportedGADShapes',
            'supi': 'supi',
            'pei': 'pei',
            'gpsi': 'gpsi',
            'ecgi': 'ecgi',
            'ecgi_on_second_node': 'ecgiOnSecondNode',
            'ncgi': 'ncgi',
            'ncgi_on_second_node': 'ncgiOnSecondNode',
            'priority': 'priority',
            'velocity_requested': 'velocityRequested',
            'ue_lcs_cap': 'ueLcsCap',
            'lcs_service_type': 'lcsServiceType',
            'ldr_type': 'ldrType',
            'hgmlc_call_back_uri': 'hgmlcCallBackURI',
            'lir_gmlc_call_back_uri': 'lirGmlcCallBackUri',
            'vgmlc_address': 'vgmlcAddress',
            'ldr_reference': 'ldrReference',
            'lir_reference': 'lirReference',
            'periodic_event_info': 'periodicEventInfo',
            'area_event_info': 'areaEventInfo',
            'motion_event_info': 'motionEventInfo',
            'reporting_access_types': 'reportingAccessTypes',
            'ue_connectivity_states': 'ueConnectivityStates',
            'ue_location_service_ind': 'ueLocationServiceInd',
            'mo_assistance_data_types': 'moAssistanceDataTypes',
            'lpp_message': 'lppMessage',
            'lpp_message_ext': 'lppMessageExt',
            'supported_features': 'supportedFeatures',
            'ue_positioning_cap': 'uePositioningCap',
            'tnap_id': 'tnapId',
            'twap_id': 'twapId',
            'ue_country_det_ind': 'ueCountryDetInd',
            'scheduled_loc_time': 'scheduledLocTime',
            'reliable_loc_req': 'reliableLocReq',
            'evt_rpt_allowed_areas': 'evtRptAllowedAreas',
            'ue_unaware_ind': 'ueUnawareInd',
            'intermediate_location_ind': 'intermediateLocationInd',
            'max_resp_time': 'maxRespTime',
            'lp_hap_type': 'lpHapType'
        }

        self._external_client_type = external_client_type
        self._correlation_id = correlation_id
        self._amf_id = amf_id
        self._location_qo_s = location_qo_s
        self._supported_gad_shapes = supported_gad_shapes
        self._supi = supi
        self._pei = pei
        self._gpsi = gpsi
        self._ecgi = ecgi
        self._ecgi_on_second_node = ecgi_on_second_node
        self._ncgi = ncgi
        self._ncgi_on_second_node = ncgi_on_second_node
        self._priority = priority
        self._velocity_requested = velocity_requested
        self._ue_lcs_cap = ue_lcs_cap
        self._lcs_service_type = lcs_service_type
        self._ldr_type = ldr_type
        self._hgmlc_call_back_uri = hgmlc_call_back_uri
        self._lir_gmlc_call_back_uri = lir_gmlc_call_back_uri
        self._vgmlc_address = vgmlc_address
        self._ldr_reference = ldr_reference
        self._lir_reference = lir_reference
        self._periodic_event_info = periodic_event_info
        self._area_event_info = area_event_info
        self._motion_event_info = motion_event_info
        self._reporting_access_types = reporting_access_types
        self._ue_connectivity_states = ue_connectivity_states
        self._ue_location_service_ind = ue_location_service_ind
        self._mo_assistance_data_types = mo_assistance_data_types
        self._lpp_message = lpp_message
        self._lpp_message_ext = lpp_message_ext
        self._supported_features = supported_features
        self._ue_positioning_cap = ue_positioning_cap
        self._tnap_id = tnap_id
        self._twap_id = twap_id
        self._ue_country_det_ind = ue_country_det_ind
        self._scheduled_loc_time = scheduled_loc_time
        self._reliable_loc_req = reliable_loc_req
        self._evt_rpt_allowed_areas = evt_rpt_allowed_areas
        self._ue_unaware_ind = ue_unaware_ind
        self._intermediate_location_ind = intermediate_location_ind
        self._max_resp_time = max_resp_time
        self._lp_hap_type = lp_hap_type

    @classmethod
    def from_dict(cls, dikt) -> 'InputData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InputData of this InputData.  # noqa: E501
        :rtype: InputData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_client_type(self):
        """Gets the external_client_type of this InputData.


        :return: The external_client_type of this InputData.
        :rtype: ExternalClientType
        """
        return self._external_client_type

    @external_client_type.setter
    def external_client_type(self, external_client_type):
        """Sets the external_client_type of this InputData.


        :param external_client_type: The external_client_type of this InputData.
        :type external_client_type: ExternalClientType
        """

        self._external_client_type = external_client_type

    @property
    def correlation_id(self):
        """Gets the correlation_id of this InputData.

        LCS Correlation ID.  # noqa: E501

        :return: The correlation_id of this InputData.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this InputData.

        LCS Correlation ID.  # noqa: E501

        :param correlation_id: The correlation_id of this InputData.
        :type correlation_id: str
        """
        if correlation_id is not None and len(correlation_id) > 255:
            raise ValueError("Invalid value for `correlation_id`, length must be less than or equal to `255`")  # noqa: E501
        if correlation_id is not None and len(correlation_id) < 1:
            raise ValueError("Invalid value for `correlation_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._correlation_id = correlation_id

    @property
    def amf_id(self):
        """Gets the amf_id of this InputData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The amf_id of this InputData.
        :rtype: str
        """
        return self._amf_id

    @amf_id.setter
    def amf_id(self, amf_id):
        """Sets the amf_id of this InputData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param amf_id: The amf_id of this InputData.
        :type amf_id: str
        """

        self._amf_id = amf_id

    @property
    def location_qo_s(self):
        """Gets the location_qo_s of this InputData.


        :return: The location_qo_s of this InputData.
        :rtype: LocationQoS
        """
        return self._location_qo_s

    @location_qo_s.setter
    def location_qo_s(self, location_qo_s):
        """Sets the location_qo_s of this InputData.


        :param location_qo_s: The location_qo_s of this InputData.
        :type location_qo_s: LocationQoS
        """

        self._location_qo_s = location_qo_s

    @property
    def supported_gad_shapes(self):
        """Gets the supported_gad_shapes of this InputData.


        :return: The supported_gad_shapes of this InputData.
        :rtype: List[SupportedGADShapes]
        """
        return self._supported_gad_shapes

    @supported_gad_shapes.setter
    def supported_gad_shapes(self, supported_gad_shapes):
        """Sets the supported_gad_shapes of this InputData.


        :param supported_gad_shapes: The supported_gad_shapes of this InputData.
        :type supported_gad_shapes: List[SupportedGADShapes]
        """
        if supported_gad_shapes is not None and len(supported_gad_shapes) < 1:
            raise ValueError("Invalid value for `supported_gad_shapes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supported_gad_shapes = supported_gad_shapes

    @property
    def supi(self):
        """Gets the supi of this InputData.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :return: The supi of this InputData.
        :rtype: str
        """
        return self._supi

    @supi.setter
    def supi(self, supi):
        """Sets the supi of this InputData.

        String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501.   # noqa: E501

        :param supi: The supi of this InputData.
        :type supi: str
        """
        #if supi is not None and not re.search(r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$', supi):  # noqa: E501
        #    raise ValueError("Invalid value for `supi`, must be a follow pattern or equal to `/^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$/`")  # noqa: E501

        self._supi = supi

    @property
    def pei(self):
        """Gets the pei of this InputData.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :return: The pei of this InputData.
        :rtype: str
        """
        return self._pei

    @pei.setter
    def pei(self, pei):
        """Sets the pei of this InputData.

        String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.    # noqa: E501

        :param pei: The pei of this InputData.
        :type pei: str
        """
        #if pei is not None and not re.search(r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$', pei):  # noqa: E501
        #    raise ValueError("Invalid value for `pei`, must be a follow pattern or equal to `/^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$/`")  # noqa: E501

        self._pei = pei

    @property
    def gpsi(self):
        """Gets the gpsi of this InputData.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :return: The gpsi of this InputData.
        :rtype: str
        """
        return self._gpsi

    @gpsi.setter
    def gpsi(self, gpsi):
        """Sets the gpsi of this InputData.

        String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= \"extid-'extid', where 'extid'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.    # noqa: E501

        :param gpsi: The gpsi of this InputData.
        :type gpsi: str
        """
        #if gpsi is not None and not re.search(r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$', gpsi):  # noqa: E501
        #    raise ValueError("Invalid value for `gpsi`, must be a follow pattern or equal to `/^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$/`")  # noqa: E501

        self._gpsi = gpsi

    @property
    def ecgi(self):
        """Gets the ecgi of this InputData.


        :return: The ecgi of this InputData.
        :rtype: Ecgi
        """
        return self._ecgi

    @ecgi.setter
    def ecgi(self, ecgi):
        """Sets the ecgi of this InputData.


        :param ecgi: The ecgi of this InputData.
        :type ecgi: Ecgi
        """

        self._ecgi = ecgi

    @property
    def ecgi_on_second_node(self):
        """Gets the ecgi_on_second_node of this InputData.


        :return: The ecgi_on_second_node of this InputData.
        :rtype: Ecgi
        """
        return self._ecgi_on_second_node

    @ecgi_on_second_node.setter
    def ecgi_on_second_node(self, ecgi_on_second_node):
        """Sets the ecgi_on_second_node of this InputData.


        :param ecgi_on_second_node: The ecgi_on_second_node of this InputData.
        :type ecgi_on_second_node: Ecgi
        """

        self._ecgi_on_second_node = ecgi_on_second_node

    @property
    def ncgi(self):
        """Gets the ncgi of this InputData.


        :return: The ncgi of this InputData.
        :rtype: Ncgi
        """
        return self._ncgi

    @ncgi.setter
    def ncgi(self, ncgi):
        """Sets the ncgi of this InputData.


        :param ncgi: The ncgi of this InputData.
        :type ncgi: Ncgi
        """

        self._ncgi = ncgi

    @property
    def ncgi_on_second_node(self):
        """Gets the ncgi_on_second_node of this InputData.


        :return: The ncgi_on_second_node of this InputData.
        :rtype: Ncgi
        """
        return self._ncgi_on_second_node

    @ncgi_on_second_node.setter
    def ncgi_on_second_node(self, ncgi_on_second_node):
        """Sets the ncgi_on_second_node of this InputData.


        :param ncgi_on_second_node: The ncgi_on_second_node of this InputData.
        :type ncgi_on_second_node: Ncgi
        """

        self._ncgi_on_second_node = ncgi_on_second_node

    @property
    def priority(self):
        """Gets the priority of this InputData.


        :return: The priority of this InputData.
        :rtype: LcsPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InputData.


        :param priority: The priority of this InputData.
        :type priority: LcsPriority
        """

        self._priority = priority

    @property
    def velocity_requested(self):
        """Gets the velocity_requested of this InputData.


        :return: The velocity_requested of this InputData.
        :rtype: VelocityRequested
        """
        return self._velocity_requested

    @velocity_requested.setter
    def velocity_requested(self, velocity_requested):
        """Sets the velocity_requested of this InputData.


        :param velocity_requested: The velocity_requested of this InputData.
        :type velocity_requested: VelocityRequested
        """

        self._velocity_requested = velocity_requested

    @property
    def ue_lcs_cap(self):
        """Gets the ue_lcs_cap of this InputData.


        :return: The ue_lcs_cap of this InputData.
        :rtype: UeLcsCapability
        """
        return self._ue_lcs_cap

    @ue_lcs_cap.setter
    def ue_lcs_cap(self, ue_lcs_cap):
        """Sets the ue_lcs_cap of this InputData.


        :param ue_lcs_cap: The ue_lcs_cap of this InputData.
        :type ue_lcs_cap: UeLcsCapability
        """

        self._ue_lcs_cap = ue_lcs_cap

    @property
    def lcs_service_type(self):
        """Gets the lcs_service_type of this InputData.

        LCS service type.  # noqa: E501

        :return: The lcs_service_type of this InputData.
        :rtype: int
        """
        return self._lcs_service_type

    @lcs_service_type.setter
    def lcs_service_type(self, lcs_service_type):
        """Sets the lcs_service_type of this InputData.

        LCS service type.  # noqa: E501

        :param lcs_service_type: The lcs_service_type of this InputData.
        :type lcs_service_type: int
        """
        if lcs_service_type is not None and lcs_service_type > 127:  # noqa: E501
            raise ValueError("Invalid value for `lcs_service_type`, must be a value less than or equal to `127`")  # noqa: E501
        if lcs_service_type is not None and lcs_service_type < 0:  # noqa: E501
            raise ValueError("Invalid value for `lcs_service_type`, must be a value greater than or equal to `0`")  # noqa: E501

        self._lcs_service_type = lcs_service_type

    @property
    def ldr_type(self):
        """Gets the ldr_type of this InputData.


        :return: The ldr_type of this InputData.
        :rtype: LdrType
        """
        return self._ldr_type

    @ldr_type.setter
    def ldr_type(self, ldr_type):
        """Sets the ldr_type of this InputData.


        :param ldr_type: The ldr_type of this InputData.
        :type ldr_type: LdrType
        """

        self._ldr_type = ldr_type

    @property
    def hgmlc_call_back_uri(self):
        """Gets the hgmlc_call_back_uri of this InputData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The hgmlc_call_back_uri of this InputData.
        :rtype: str
        """
        return self._hgmlc_call_back_uri

    @hgmlc_call_back_uri.setter
    def hgmlc_call_back_uri(self, hgmlc_call_back_uri):
        """Sets the hgmlc_call_back_uri of this InputData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param hgmlc_call_back_uri: The hgmlc_call_back_uri of this InputData.
        :type hgmlc_call_back_uri: str
        """

        self._hgmlc_call_back_uri = hgmlc_call_back_uri

    @property
    def lir_gmlc_call_back_uri(self):
        """Gets the lir_gmlc_call_back_uri of this InputData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The lir_gmlc_call_back_uri of this InputData.
        :rtype: str
        """
        return self._lir_gmlc_call_back_uri

    @lir_gmlc_call_back_uri.setter
    def lir_gmlc_call_back_uri(self, lir_gmlc_call_back_uri):
        """Sets the lir_gmlc_call_back_uri of this InputData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param lir_gmlc_call_back_uri: The lir_gmlc_call_back_uri of this InputData.
        :type lir_gmlc_call_back_uri: str
        """

        self._lir_gmlc_call_back_uri = lir_gmlc_call_back_uri

    @property
    def vgmlc_address(self):
        """Gets the vgmlc_address of this InputData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The vgmlc_address of this InputData.
        :rtype: str
        """
        return self._vgmlc_address

    @vgmlc_address.setter
    def vgmlc_address(self, vgmlc_address):
        """Sets the vgmlc_address of this InputData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param vgmlc_address: The vgmlc_address of this InputData.
        :type vgmlc_address: str
        """

        self._vgmlc_address = vgmlc_address

    @property
    def ldr_reference(self):
        """Gets the ldr_reference of this InputData.

        LDR Reference.  # noqa: E501

        :return: The ldr_reference of this InputData.
        :rtype: str
        """
        return self._ldr_reference

    @ldr_reference.setter
    def ldr_reference(self, ldr_reference):
        """Sets the ldr_reference of this InputData.

        LDR Reference.  # noqa: E501

        :param ldr_reference: The ldr_reference of this InputData.
        :type ldr_reference: str
        """
        if ldr_reference is not None and len(ldr_reference) > 510:
            raise ValueError("Invalid value for `ldr_reference`, length must be less than or equal to `510`")  # noqa: E501
        if ldr_reference is not None and len(ldr_reference) < 2:
            raise ValueError("Invalid value for `ldr_reference`, length must be greater than or equal to `2`")  # noqa: E501

        self._ldr_reference = ldr_reference

    @property
    def lir_reference(self):
        """Gets the lir_reference of this InputData.

        LIR Reference.  # noqa: E501

        :return: The lir_reference of this InputData.
        :rtype: str
        """
        return self._lir_reference

    @lir_reference.setter
    def lir_reference(self, lir_reference):
        """Sets the lir_reference of this InputData.

        LIR Reference.  # noqa: E501

        :param lir_reference: The lir_reference of this InputData.
        :type lir_reference: str
        """
        if lir_reference is not None and len(lir_reference) > 510:
            raise ValueError("Invalid value for `lir_reference`, length must be less than or equal to `510`")  # noqa: E501
        if lir_reference is not None and len(lir_reference) < 2:
            raise ValueError("Invalid value for `lir_reference`, length must be greater than or equal to `2`")  # noqa: E501

        self._lir_reference = lir_reference

    @property
    def periodic_event_info(self):
        """Gets the periodic_event_info of this InputData.


        :return: The periodic_event_info of this InputData.
        :rtype: PeriodicEventInfo
        """
        return self._periodic_event_info

    @periodic_event_info.setter
    def periodic_event_info(self, periodic_event_info):
        """Sets the periodic_event_info of this InputData.


        :param periodic_event_info: The periodic_event_info of this InputData.
        :type periodic_event_info: PeriodicEventInfo
        """

        self._periodic_event_info = periodic_event_info

    @property
    def area_event_info(self):
        """Gets the area_event_info of this InputData.


        :return: The area_event_info of this InputData.
        :rtype: AreaEventInfo
        """
        return self._area_event_info

    @area_event_info.setter
    def area_event_info(self, area_event_info):
        """Sets the area_event_info of this InputData.


        :param area_event_info: The area_event_info of this InputData.
        :type area_event_info: AreaEventInfo
        """

        self._area_event_info = area_event_info

    @property
    def motion_event_info(self):
        """Gets the motion_event_info of this InputData.


        :return: The motion_event_info of this InputData.
        :rtype: MotionEventInfo
        """
        return self._motion_event_info

    @motion_event_info.setter
    def motion_event_info(self, motion_event_info):
        """Sets the motion_event_info of this InputData.


        :param motion_event_info: The motion_event_info of this InputData.
        :type motion_event_info: MotionEventInfo
        """

        self._motion_event_info = motion_event_info

    @property
    def reporting_access_types(self):
        """Gets the reporting_access_types of this InputData.


        :return: The reporting_access_types of this InputData.
        :rtype: List[ReportingAccessType]
        """
        return self._reporting_access_types

    @reporting_access_types.setter
    def reporting_access_types(self, reporting_access_types):
        """Sets the reporting_access_types of this InputData.


        :param reporting_access_types: The reporting_access_types of this InputData.
        :type reporting_access_types: List[ReportingAccessType]
        """
        if reporting_access_types is not None and len(reporting_access_types) < 1:
            raise ValueError("Invalid value for `reporting_access_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._reporting_access_types = reporting_access_types

    @property
    def ue_connectivity_states(self):
        """Gets the ue_connectivity_states of this InputData.


        :return: The ue_connectivity_states of this InputData.
        :rtype: UeConnectivityState
        """
        return self._ue_connectivity_states

    @ue_connectivity_states.setter
    def ue_connectivity_states(self, ue_connectivity_states):
        """Sets the ue_connectivity_states of this InputData.


        :param ue_connectivity_states: The ue_connectivity_states of this InputData.
        :type ue_connectivity_states: UeConnectivityState
        """

        self._ue_connectivity_states = ue_connectivity_states

    @property
    def ue_location_service_ind(self):
        """Gets the ue_location_service_ind of this InputData.


        :return: The ue_location_service_ind of this InputData.
        :rtype: UeLocationServiceInd
        """
        return self._ue_location_service_ind

    @ue_location_service_ind.setter
    def ue_location_service_ind(self, ue_location_service_ind):
        """Sets the ue_location_service_ind of this InputData.


        :param ue_location_service_ind: The ue_location_service_ind of this InputData.
        :type ue_location_service_ind: UeLocationServiceInd
        """

        self._ue_location_service_ind = ue_location_service_ind

    @property
    def mo_assistance_data_types(self):
        """Gets the mo_assistance_data_types of this InputData.


        :return: The mo_assistance_data_types of this InputData.
        :rtype: LcsBroadcastAssistanceTypesData
        """
        return self._mo_assistance_data_types

    @mo_assistance_data_types.setter
    def mo_assistance_data_types(self, mo_assistance_data_types):
        """Sets the mo_assistance_data_types of this InputData.


        :param mo_assistance_data_types: The mo_assistance_data_types of this InputData.
        :type mo_assistance_data_types: LcsBroadcastAssistanceTypesData
        """

        self._mo_assistance_data_types = mo_assistance_data_types

    @property
    def lpp_message(self):
        """Gets the lpp_message of this InputData.


        :return: The lpp_message of this InputData.
        :rtype: RefToBinaryData
        """
        return self._lpp_message

    @lpp_message.setter
    def lpp_message(self, lpp_message):
        """Sets the lpp_message of this InputData.


        :param lpp_message: The lpp_message of this InputData.
        :type lpp_message: RefToBinaryData
        """

        self._lpp_message = lpp_message

    @property
    def lpp_message_ext(self):
        """Gets the lpp_message_ext of this InputData.

        Indicates the lpp message extension.  # noqa: E501

        :return: The lpp_message_ext of this InputData.
        :rtype: List[RefToBinaryData]
        """
        return self._lpp_message_ext

    @lpp_message_ext.setter
    def lpp_message_ext(self, lpp_message_ext):
        """Sets the lpp_message_ext of this InputData.

        Indicates the lpp message extension.  # noqa: E501

        :param lpp_message_ext: The lpp_message_ext of this InputData.
        :type lpp_message_ext: List[RefToBinaryData]
        """
        if lpp_message_ext is not None and len(lpp_message_ext) < 1:
            raise ValueError("Invalid value for `lpp_message_ext`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._lpp_message_ext = lpp_message_ext

    @property
    def supported_features(self):
        """Gets the supported_features of this InputData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this InputData.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this InputData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this InputData.
        :type supported_features: str
        """
        #if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
        #    raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def ue_positioning_cap(self):
        """Gets the ue_positioning_cap of this InputData.

        Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).  # noqa: E501

        :return: The ue_positioning_cap of this InputData.
        :rtype: str
        """
        return self._ue_positioning_cap

    @ue_positioning_cap.setter
    def ue_positioning_cap(self, ue_positioning_cap):
        """Sets the ue_positioning_cap of this InputData.

        Positioning capabilities supported by the UE. A string encoding the \"ProvideCapabilities-r9-IEs\" IE as specified in clause 6.3 of 3GPP TS 37.355 (start from octet 1).  # noqa: E501

        :param ue_positioning_cap: The ue_positioning_cap of this InputData.
        :type ue_positioning_cap: str
        """

        self._ue_positioning_cap = ue_positioning_cap

    @property
    def tnap_id(self):
        """Gets the tnap_id of this InputData.


        :return: The tnap_id of this InputData.
        :rtype: TnapId
        """
        return self._tnap_id

    @tnap_id.setter
    def tnap_id(self, tnap_id):
        """Sets the tnap_id of this InputData.


        :param tnap_id: The tnap_id of this InputData.
        :type tnap_id: TnapId
        """

        self._tnap_id = tnap_id

    @property
    def twap_id(self):
        """Gets the twap_id of this InputData.


        :return: The twap_id of this InputData.
        :rtype: TwapId
        """
        return self._twap_id

    @twap_id.setter
    def twap_id(self, twap_id):
        """Sets the twap_id of this InputData.


        :param twap_id: The twap_id of this InputData.
        :type twap_id: TwapId
        """

        self._twap_id = twap_id

    @property
    def ue_country_det_ind(self):
        """Gets the ue_country_det_ind of this InputData.


        :return: The ue_country_det_ind of this InputData.
        :rtype: bool
        """
        return self._ue_country_det_ind

    @ue_country_det_ind.setter
    def ue_country_det_ind(self, ue_country_det_ind):
        """Sets the ue_country_det_ind of this InputData.


        :param ue_country_det_ind: The ue_country_det_ind of this InputData.
        :type ue_country_det_ind: bool
        """

        self._ue_country_det_ind = ue_country_det_ind

    @property
    def scheduled_loc_time(self):
        """Gets the scheduled_loc_time of this InputData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The scheduled_loc_time of this InputData.
        :rtype: datetime
        """
        return self._scheduled_loc_time

    @scheduled_loc_time.setter
    def scheduled_loc_time(self, scheduled_loc_time):
        """Sets the scheduled_loc_time of this InputData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param scheduled_loc_time: The scheduled_loc_time of this InputData.
        :type scheduled_loc_time: datetime
        """

        self._scheduled_loc_time = scheduled_loc_time

    @property
    def reliable_loc_req(self):
        """Gets the reliable_loc_req of this InputData.


        :return: The reliable_loc_req of this InputData.
        :rtype: bool
        """
        return self._reliable_loc_req

    @reliable_loc_req.setter
    def reliable_loc_req(self, reliable_loc_req):
        """Sets the reliable_loc_req of this InputData.


        :param reliable_loc_req: The reliable_loc_req of this InputData.
        :type reliable_loc_req: bool
        """

        self._reliable_loc_req = reliable_loc_req

    @property
    def evt_rpt_allowed_areas(self):
        """Gets the evt_rpt_allowed_areas of this InputData.


        :return: The evt_rpt_allowed_areas of this InputData.
        :rtype: List[ReportingArea]
        """
        return self._evt_rpt_allowed_areas

    @evt_rpt_allowed_areas.setter
    def evt_rpt_allowed_areas(self, evt_rpt_allowed_areas):
        """Sets the evt_rpt_allowed_areas of this InputData.


        :param evt_rpt_allowed_areas: The evt_rpt_allowed_areas of this InputData.
        :type evt_rpt_allowed_areas: List[ReportingArea]
        """
        if evt_rpt_allowed_areas is not None and len(evt_rpt_allowed_areas) > 250:
            raise ValueError("Invalid value for `evt_rpt_allowed_areas`, number of items must be less than or equal to `250`")  # noqa: E501
        if evt_rpt_allowed_areas is not None and len(evt_rpt_allowed_areas) < 1:
            raise ValueError("Invalid value for `evt_rpt_allowed_areas`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._evt_rpt_allowed_areas = evt_rpt_allowed_areas

    @property
    def ue_unaware_ind(self):
        """Gets the ue_unaware_ind of this InputData.


        :return: The ue_unaware_ind of this InputData.
        :rtype: bool
        """
        return self._ue_unaware_ind

    @ue_unaware_ind.setter
    def ue_unaware_ind(self, ue_unaware_ind):
        """Sets the ue_unaware_ind of this InputData.


        :param ue_unaware_ind: The ue_unaware_ind of this InputData.
        :type ue_unaware_ind: bool
        """
        allowed_values = [True]  # noqa: E501
        if ue_unaware_ind not in allowed_values:
            raise ValueError(
                "Invalid value for `ue_unaware_ind` ({0}), must be one of {1}"
                .format(ue_unaware_ind, allowed_values)
            )

        self._ue_unaware_ind = ue_unaware_ind

    @property
    def intermediate_location_ind(self):
        """Gets the intermediate_location_ind of this InputData.


        :return: The intermediate_location_ind of this InputData.
        :rtype: bool
        """
        return self._intermediate_location_ind

    @intermediate_location_ind.setter
    def intermediate_location_ind(self, intermediate_location_ind):
        """Sets the intermediate_location_ind of this InputData.


        :param intermediate_location_ind: The intermediate_location_ind of this InputData.
        :type intermediate_location_ind: bool
        """

        self._intermediate_location_ind = intermediate_location_ind

    @property
    def max_resp_time(self):
        """Gets the max_resp_time of this InputData.

        indicating a time in seconds.  # noqa: E501

        :return: The max_resp_time of this InputData.
        :rtype: int
        """
        return self._max_resp_time

    @max_resp_time.setter
    def max_resp_time(self, max_resp_time):
        """Sets the max_resp_time of this InputData.

        indicating a time in seconds.  # noqa: E501

        :param max_resp_time: The max_resp_time of this InputData.
        :type max_resp_time: int
        """

        self._max_resp_time = max_resp_time

    @property
    def lp_hap_type(self):
        """Gets the lp_hap_type of this InputData.


        :return: The lp_hap_type of this InputData.
        :rtype: LpHapType
        """
        return self._lp_hap_type

    @lp_hap_type.setter
    def lp_hap_type(self, lp_hap_type):
        """Sets the lp_hap_type of this InputData.


        :param lp_hap_type: The lp_hap_type of this InputData.
        :type lp_hap_type: LpHapType
        """

        self._lp_hap_type = lp_hap_type
